package FLxER.comp {	import flash.display.Sprite;	import flash.events.*;	import FLxER.main.Txt;	import FLxER.main.Rett;	import flash.geom.ColorTransform;

	public class ButtonBase extends Sprite {		public var w:uint;		public var h:uint;		private var alt:String;		private var fnz:Function;		private var fnzUp:Function;		private var param:String;		public var rett:Rett;		public var lab:Txt;		public function ButtonBase(xx:Number,yy:Number,ww:uint,hh:uint,f:Function, p:String, a:String):void {			x = xx;			y = yy;			w = ww;			h = hh;			fnz = f			alt = a			param = p;			this.mouseChildren = false;			myEnable()		}		public function mouseUpAcivation(f:Function):void {			fnzUp = f		}		private function mouseUpHandler(event:Event):void {			if (fnzUp is Function) {				fnzUp("");			}			if (this.lab is Txt) {				this.lab.backgroundColor = Preferences.pref.myCol.bkgCol;			}		} 		private function mouseOverHandler(event:Event):void {			if (this.lab is Txt) {				//Preferences.				this.lab.backgroundColor = Preferences.pref.myCol.bkgColOver;			} else if (this.rett is Rett) {				var myCol:ColorTransform = rett.transform.colorTransform;				myCol.color = Preferences.pref.myCol.bkgColOver;				rett.transform.colorTransform = myCol;			}			//trace("mouseOverHandler" + Preferences.myAlt);			if (Preferences.pref.vKS && alt) {				Preferences.myAlt.avvia(alt);			}		}		private function mouseOutHandler(event:Event):void {			if (fnzUp is Function) {				fnzUp("");			}			if (this.lab is Txt) {				this.lab.backgroundColor = Preferences.pref.myCol.bkgCol;			} else if (this.rett is Rett) {				var myCol:ColorTransform = rett.transform.colorTransform;				myCol.color = Preferences.pref.myCol.bkgCol;				rett.transform.colorTransform = myCol;			}			if (Preferences.pref.vKS && alt) {				Preferences.myAlt.stoppa();			}		}		public function myDisable():void {			this.removeEventListener(MouseEvent.MOUSE_OVER,mouseOverHandler);			this.removeEventListener(MouseEvent.MOUSE_OUT,mouseOutHandler);			this.removeEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);			this.removeEventListener(MouseEvent.MOUSE_UP,mouseUpHandler);			this.buttonMode = false;			//this.alpha = .9;			if (this.lab is Txt) {				this.lab.backgroundColor = Preferences.pref.myCol.bkgColOver;			} else {			}			this.alpha = .6;		}		public function myEnable():void {			this.addEventListener(MouseEvent.MOUSE_OVER,mouseOverHandler);			this.addEventListener(MouseEvent.MOUSE_OUT,mouseOutHandler);			this.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);			this.addEventListener(MouseEvent.MOUSE_UP,mouseUpHandler);			this.buttonMode = true;			//this.alpha = 1;			if (this.lab is Txt) {				this.lab.backgroundColor = Preferences.pref.myCol.bkgCol;			} else {			}			this.alpha = 1;		}		public function mouseDownHandler(event:Event):void {			//trace("mouseDownHandler");			if (Preferences.pref.vKS && alt) {				Preferences.myAlt.stoppa();			}			fnz(param);			//q1!			//Selection.setFocus(null);		}	}}