package FLxER.comp{	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.utils.clearInterval;	import flash.utils.setInterval;	import flash.xml.XMLNode;	//	import FLxER.comp.ListBox;	import FLxER.main.Rett;	import flash.display.DisplayObject;

	public class ListMenu extends Sprite {		private var w:Number;		private var h:Number;		private var txt:String;		private var myXml:XMLNode;		private var fnz:Function;		private var n:Number;		private var val:String;		////		private var c:Number;		private var conta:Number;		private var toppa:Rett;		public var lab:ButtonTxt;		private var labs:Sprite;		private var labsA:Object;		private var point:Object;		private var alt:String;		private var up:Sprite;		private var down:Sprite;		private var firsTime:Boolean;		public var startVal:String;		private var myPos:DisplayObject;		public function ListMenu(xx:Number,yy:Number,ww:uint,hh:uint,t:String,f:Function,alt:String, xml:XMLNode, nn:uint):void {			x = xx;			//trace(xml)			y = yy;			w=ww;			h=hh;			myXml = xml			fnz = f;			startVal = val = t;			n = nn;			lab = new ButtonTxt(0, 0, w, h, t, apri, null, alt);			this.addChild(lab)			labsA = new Object();			labs = new Sprite();			for (var b:int=0; b<n; b++) {				labsA["lab"+b] = new ButtonTxt(0, b*hh, ww, hh, " ", seleziona, b.toString(), null);				this.labs.addChild(labsA["lab"+b]);			}			up = new Rett(0,-h,w,h,Preferences.pref.myCol.bkgCol,-1,0);			down = new Rett(0,hh*n,w,h,Preferences.pref.myCol.bkgCol,-1,0);			up.addEventListener(MouseEvent.MOUSE_OVER,avvia_scrolla);			up.addEventListener(MouseEvent.MOUSE_OUT,avvia_scrolla);			down.addEventListener(MouseEvent.MOUSE_OVER,avvia_scrolla);			down.addEventListener(MouseEvent.MOUSE_OUT,avvia_scrolla);			this.labs.addChild(down);			this.labs.addChild(up);			if (xml) {				avvia(xml);			}		}		public function resetta():void {			lab.lab.text = startVal;			if (myXml) {				firsTime = true;				conta = 0;				riempi();			}		}		public function avvia(xml:XMLNode):void {			firsTime = true;			conta = 0;			myXml = xml;			riempi();		}		private function riempi():void {			for (var d:uint=0; d<n; d++) {				if (d+conta<myXml.childNodes.length) {					//trace("riempi   "+myXml.childNodes[d+conta].attributes.m);					labsA["lab"+d].lab.text = myXml.childNodes[d+conta].attributes.m;				} else {					labsA["lab"+d].lab.text = " ";				}			}		}		private function avvia_scrolla(event:Event):void {			var b:Number = (mouseY>0 ? 1 : -1);			if (event.type=="mouseOver") {				c = setInterval(scrolla, 100, b);				scrolla(b);			} else {				clearInterval(c);			}		}		public function scrolla(b:Number):void {			if (conta+b>=0) {				if (b+conta<myXml.childNodes.length) {					conta += (firsTime ? 0 : b);					firsTime = false					riempi();				} else {					clearInterval(c);				}			}		}		public function seleziona(b:uint):void {			stage.focus=Preferences.interfaceTrgt.parent;			firsTime = false			if(toppa) {				if(this.contains(toppa)) {					this.removeChild(toppa)					this.removeChild(labs)				}			}			var p:String = myXml.childNodes[conta+b].attributes.m;			var v:String;			if (myXml.childNodes[conta+b].attributes.val != undefined) {				v = myXml.childNodes[conta+b].attributes.val;			} else {				v = p;			}			if (myPos) this.parent.swapChildren(myPos, this)			setVal(p, v)			fnz(p, v);		}		private function apri(t:String):void {			if (!toppa) {				point = new Point(0,0);				//point = this.localToGlobal(point);				toppa = new Rett(-point.x, -point.y, 800, 600, 0xFFFFFF, -1, 0)				toppa.addEventListener(MouseEvent.MOUSE_DOWN, chiudi);			}			this.addChild(toppa)			this.addChild(labs)			myPos = this.parent.getChildAt(this.parent.numChildren-1);			this.parent.swapChildren(this, myPos)		}		private function chiudi(b:String):void {			trace("chiudi")			this.parent.swapChildren(myPos, this)			this.removeChild(toppa)			this.removeChild(labs)		}		public function setVal(p:String,v:String):void {			lab.lab.text = p;			val = v;		}		public function myEnable():void {			this.lab.myEnable();		}		public function myDisable():void {			this.lab.myDisable();		}		public function getVal():Array {			return [lab.lab.text,val];		}	}}