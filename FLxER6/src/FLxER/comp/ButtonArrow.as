package FLxER.comp {	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.*;	public class ButtonArrow extends Sprite {		private var fnz:Function;		private var param:String;		private var alt:String;		///////		public function ButtonArrow(xx:Number, yy:Number, r:Number, f:Function, p:int, a:String):void {			fnz = f;			param = p.toString();			alt = a;			rotation = r;			if (r == 180) {				x = xx+10;				y = yy+6;			} else if (r == -90) {				x = xx;				y = yy+10;			} else if (r == 90) {				x = xx+6;				y = yy;			} else {				x = xx;				y = yy;			}			arrowDrawer(this, 0x000000);			this.addEventListener(MouseEvent.MOUSE_OVER,mouseOverHandler);			this.addEventListener(MouseEvent.MOUSE_OUT,mouseOutHandler);			this.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);			this.addEventListener(MouseEvent.MOUSE_UP,mouseUpHandler);			this.buttonMode=true;		}		private function arrowDrawer(trgt, col):void {			with (trgt) {				graphics.beginFill(col,1);				graphics.moveTo(0,0);				graphics.lineTo(10,0);				graphics.lineTo(10,2);				graphics.lineTo(8,2);				graphics.lineTo(8,4);				graphics.lineTo(6,4);				graphics.lineTo(6,6);				graphics.lineTo(4,6);				graphics.lineTo(4,4);				graphics.lineTo(2,4);				graphics.lineTo(2,2);				graphics.lineTo(0,2);				graphics.lineTo(0,0);			}		}		private function mouseOverHandler(event:Event):void {			if (Preferences.pref.vKS && alt) {				Preferences.myAlt.avvia(alt);			}		}		private function mouseOutHandler(event:Event):void {			if (Preferences.pref.vKS && alt) {				Preferences.myAlt.stoppa();			}		}		public function mouseDownHandler(event:Event):void {			fnz(parseInt(param));			mouseOutHandler(event);		}		public function myDisable():void {			this.removeEventListener(MouseEvent.MOUSE_OVER,mouseOverHandler);			this.removeEventListener(MouseEvent.MOUSE_OUT,mouseOutHandler);			this.removeEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);			this.removeEventListener(MouseEvent.MOUSE_UP,mouseUpHandler);			this.buttonMode = false;			this.alpha = .6;		}		public function myEnable():void {			this.addEventListener(MouseEvent.MOUSE_OVER,mouseOverHandler);			this.addEventListener(MouseEvent.MOUSE_OUT,mouseOutHandler);			this.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);			this.addEventListener(MouseEvent.MOUSE_UP,mouseUpHandler);			this.buttonMode = true;			this.alpha = 1;		}		private function mouseUpHandler(event:Event):void {			fnz(0);		}	}}