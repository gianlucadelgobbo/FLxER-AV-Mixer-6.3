package FLxER.core {	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.net.URLRequest;	import flash.utils.getTimer;		import FLxER.core.Player;	import FLxER.main.Rett;	import FLxER.panels.OutputOption;
	public class Output extends Sprite {		private var nCh:uint;		public var fondo:Rett;		public var levels:Object;		public var w:uint;		public var h:uint;		private var swfLoader:Loader;		//		private var myAction:Array;		public var mon:Sprite; 		private var myMask:Rett;		public var myOutputOption					:OutputOption;		public function Output(xx:Number, yy:Number, ww:uint, hh:uint, n:uint):void {			Preferences.nLoadErr = new Object();			Preferences.currentMedia = new Object();			x = xx;			y = yy;			w = ww;			h = hh;			nCh = n;			fondo = new Rett(0,0,w,h,Preferences.pref.myCol.monCol,-1,1);			this.addChild(fondo);			mon = new Sprite();			this.addChild(mon);			myMask = new Rett(0,0,w,h,Preferences.pref.myCol.monCol,-1,1);			this.addChild(myMask);			this.mon.mask = myMask;			levels = new Object();			for (var a:int=0; a<Preferences.pref.nCh; a++) {					levels["ch_"+a] = new Player(a,w,h,this,"center",false);					this.mon.addChild(levels["ch_"+a]);			}			myOutputOption = new OutputOption(175, 135, "OUTPUT MODE", savePref,closePrefPanel);		}		private function closePrefPanel():void {		}		public function savePref(args:Array):void {			if (args.length) {				Preferences.starterTrgt.manualOtuputSize(args[0],args[1],args[2],args[3]);			} else {				Preferences.starterTrgt.goFullKey(null);							}		}		public function initHandlerSWF(e:Loader,ch:uint):void {		}		public function initHandlerFLV(event:Event,ch:uint):void {		}		public function initHandlerMP3(ch:uint):void {		}		public function initHandlerJPG(e:Loader,ch:uint):void {		}		public function errorHandlerCNT(event:Event,ch:uint):void {		}		public function errorHandlerSWF(event:Event,ch:uint):void {		}		public function errorHandlerFLV(event:Event,ch:uint):void {		}		public function errorHandlerMP3(event:Event,ch:uint):void {		}		public function errorHandlerJPG(event:Event,ch:uint):void {		}		public function errorHandlerWipes(event:Event, ch:uint):void {		}		//		public function resizer():void {			myMask.width = fondo.width = w = Preferences.pref.monObj.monWidth;			myMask.height = fondo.height = h = Preferences.pref.monObj.monHeight;			for (var a:int=0; a<Preferences.pref.nCh; a++) {				if(levels["ch_"+a]) levels["ch_"+a].resizer();			}		}		public function mbuto(azione:String):void {			trace("mbuto output: "+azione)			myAction = azione.split(",");			levels["ch_"+myAction[2]][myAction[1]](myAction);		}		public function myHQ(t:Boolean):void {			trace(stage.quality);			if (stage.quality == "LOW") {				removeChild(swfLoader)				swfLoader = null				stage.quality = "HIGH";			} else {				swfLoader = new Loader();				swfLoader.load(new URLRequest("swf/toggleHighQuality.swf"));				addChild(swfLoader)			}			trace(stage.quality);		}	}}