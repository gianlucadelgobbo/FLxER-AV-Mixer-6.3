package FLxER.core {	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.utils.clearInterval;	import flash.utils.getTimer;	import flash.utils.setInterval;	import flash.xml.XMLDocument;		import FLxER.core.Player;	import FLxER.main.Rett;
	public class Monitor extends Sprite {		private var nCh:uint;		public var fondo:Rett;		public var levels:Object;		public var w:uint;		public var h:uint;		//		public var mon:Sprite; 		private var myMask:Rett;		private var myAction:Array;		public var livesetIndex:uint;		private var livesetIterator:uint;		private var swfLoader:Loader;		public function Monitor(xx:Number, yy:Number, ww:uint, hh:uint, n:uint):void {			Preferences.nLoadErr = new Object();			Preferences.currentMedia = new Object();			x = xx;			y = yy;			w = ww;			h = hh;			nCh = n;			fondo = new Rett(0,0,w,h,Preferences.pref.myCol.monCol,-1,1);			this.addChild(fondo);			this.addEventListener(MouseEvent.MOUSE_DOWN,myDrag);			this.buttonMode = false;			this.mouseChildren = true;			mon = new Sprite();			this.addChild(mon);			myMask = new Rett(0,0,w,h,Preferences.pref.myCol.monCol,-1,1);			this.addChild(myMask);			this.mon.mask = myMask;			levels = new Object();			for (var a:int=0; a<Preferences.pref.nCh; a++) {				trace("bella "+a)				levels["ch_"+a] = new Player(a,w,h,this,"center",true);				this.mon.addChild(levels["ch_"+a]);			}			livesetIndex = 0;		}		public function initHandlerSWF(e:Loader,ch:uint):void {		}		public function initHandlerFLV(event:Event,ch:uint):void {		}		public function initHandlerMP3(ch:uint):void {		}		public function initHandlerJPG(e:Loader,ch:uint):void {		}		public function errorHandlerCNT(event:Event,ch:uint):void {			if (Preferences.nLoadErr["ch_"+ch]<1 && Preferences.pref.serverLibrary.useServer) {				Preferences.nLoadErr["ch_"+ch]++;				var u:String = Preferences.pref.serverLibrary.value+Preferences.currentMedia["ch_"+ch];				Preferences.interfaceTrgt.chCnt["ch_"+ch].myLoadMovieMore(u,u)			} else {				Preferences.interfaceTrgt.chCnt["ch_"+ch].loadErr(event);			}		}		public function errorHandlerSWF(event:Event,ch:uint):void {			errorHandlerCNT(event,ch);		}		public function errorHandlerFLV(event:Event,ch:uint):void {			errorHandlerCNT(event,ch);		}		public function errorHandlerMP3(event:Event,ch:uint):void {			errorHandlerCNT(event,ch);		}		public function errorHandlerJPG(event:Event,ch:uint):void {			errorHandlerCNT(event,ch);		}		public function errorHandlerWipes(event:Event, ch:uint):void {			errorHandlerCNT(event,ch);		}		//		public function resizer():void {			myMask.width = fondo.width = w = Preferences.pref.monObj.monWidth;			myMask.height = fondo.height = h = Preferences.pref.monObj.monHeight;			for (var a:int=0; a<Preferences.pref.nCh; a++) {				if(levels["ch_"+a]) levels["ch_"+a].resizer();			}		}		public function mbuto(azione:String):void {			trace("mbuto monitor: "+Preferences.myPreviewActive)			trace("MMmbuto "+azione);			if (Preferences.pref.recStatus) {				var tmp:XMLDocument = new XMLDocument("<r>"+azione+"</r>");				trace(Preferences.myGlobalCtrl.myRecorder.myLiveset)				Preferences.myGlobalCtrl.myRecorder.myLiveset.childNodes[0].appendChild(tmp.childNodes[0]);				trace(Preferences.myGlobalCtrl.myRecorder.myLiveset)				Preferences.lastTime = getTimer();			}			if (Preferences.monitorOut && !Preferences.pref.bitmap) Preferences.monitorOut.mbuto(azione);			if (Preferences.myPreviewActive) {				myAction = azione.split(",");				levels["ch_"+myAction[2]][myAction[1]](myAction);				Preferences.lastTime = getTimer();			}		}		private function myDrag(event:Event):void {			stage.addEventListener(MouseEvent.MOUSE_UP,myDragStop);			if (Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].lockWipeStatus) {				levels["ch_"+Preferences.pref.ch].startDrag();			} else {				levels["ch_"+Preferences.pref.ch].vid.startDrag();			}			stage.addEventListener(MouseEvent.MOUSE_MOVE,updateOut);		}		private function myDragStop(event:Event):void {			stage.removeEventListener(MouseEvent.MOUSE_MOVE,updateOut);			stage.removeEventListener(MouseEvent.MOUSE_UP,myDragStop);			stopDrag();		}		private function updateOut(event:Event):void {			Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myTrasform.updateOnDrag();			var az:String = (getTimer()-Preferences.lastTime)+",chMove,"+Preferences.pref.ch+","+levels["ch_"+Preferences.pref.ch].x+","+levels["ch_"+Preferences.pref.ch].y+","+levels["ch_"+Preferences.pref.ch].vid.x+","+levels["ch_"+Preferences.pref.ch].vid.y;			if (Preferences.monitorOut && !Preferences.pref.bitmap) {				Preferences.monitorOut.mbuto(az);			}			if (Preferences.pref.recStatus) {				var tmp:XMLDocument = new XMLDocument("<r>"+az+"</r>");				trace(Preferences.myGlobalCtrl.myRecorder.myLiveset)				Preferences.myGlobalCtrl.myRecorder.myLiveset.childNodes[0].appendChild(tmp.childNodes[0]);				trace(Preferences.myGlobalCtrl.myRecorder.myLiveset)				Preferences.lastTime = getTimer();			}		}		public function stop_liveset():void {			clearInterval(livesetIterator)		}		public function play_liveset():void {			var tmp2:Array = Preferences.myGlobalCtrl.myRecorder.myLiveset.childNodes[0].childNodes[this.livesetIndex].childNodes[0].toString().split(",");			trace(Preferences.myGlobalCtrl.myRecorder.myLiveset.childNodes[0].childNodes[this.livesetIndex].childNodes.toString());			trace(tmp2);			livesetIterator = setInterval(play_liveset_int, parseInt(tmp2[0]));		}		private function play_liveset_int():void {			clearInterval(livesetIterator);			var tmp3:String = Preferences.myGlobalCtrl.myRecorder.myLiveset.childNodes[0].childNodes[this.livesetIndex].childNodes.toString();			tmp3 = Preferences.myReplace(tmp3,",,<svg",",<svg");			mbuto(tmp3);			if (this.livesetIndex<Preferences.myGlobalCtrl.myRecorder.myLiveset.childNodes[0].childNodes.length-1) {				this.livesetIndex++;				play_liveset();			} else {				if (Preferences.myGlobalCtrl.myRecorder.loopStatus) {					this.livesetIndex = 0;					for (var a:int=0; a<Preferences.pref.nCh; a++) {						levels["ch_"+a].eject(null);					}									play_liveset();				}			}		}		public function myHQ(t:Boolean):void {			trace(stage.quality);			if (stage.quality == "LOW") {				removeChild(swfLoader)				swfLoader = null				stage.quality = "HIGH";			} else {				swfLoader = new Loader();				swfLoader.load(new URLRequest("swf/toggleHighQuality.swf"));				addChild(swfLoader)			}			trace(stage.quality);		}	}}