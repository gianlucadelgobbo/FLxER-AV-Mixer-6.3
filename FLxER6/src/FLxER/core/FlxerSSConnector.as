package FLxER.core {    import flash.net.XMLSocket;	import flash.utils.*;	import flash.events.*;	import flash.xml.XMLDocument;	import flash.xml.XMLNode;	import FLxER.panels.Mess;	import FLxER.panels.OptionsRemote;	public class FlxerSSConnector {		//		public var fnzOnConnect:Function;		public var fnzOnData:Function;		var trgt:OptionsRemote		//		var socket:XMLSocket		var c:uint;		var socketBroad:XMLSocket		var broadName:String;		var server:String;		var firstTime:Boolean;		public function FlxerSSConnector(f1:Function,f2:Function):void {			fnzOnConnect = f1;			fnzOnData = f2;			trace ("socketBroad.onData "+fnzOnData)		}		public function starter(t:OptionsRemote):void {			trgt = t			firstTime = true;			socket = new XMLSocket()            //socket.addEventListener(Event.CLOSE, closeHandler);            socket.addEventListener(Event.CONNECT, socketOnConnect);            socket.addEventListener(DataEvent.DATA, socketOnData);            socket.addEventListener(IOErrorEvent.IO_ERROR, socketOnError);            socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, socketOnError);            //socket.addEventListener(ProgressEvent.PROGRESS, progressHandler);			socketBroad = new XMLSocket()            socketBroad.addEventListener(Event.CONNECT, socketBroadOnConnect);            socketBroad.addEventListener(DataEvent.DATA, socketBroadOnData);            socketBroad.addEventListener(IOErrorEvent.IO_ERROR, socketBroadOnError);            socketBroad.addEventListener(SecurityErrorEvent.SECURITY_ERROR, socketBroadOnError);		}		function socketBroadOnConnect(event:Event):void {			trace(event)			clearInterval(c);			trace ("Connection socketBroad ok!");			if (fnzOnConnect is Function) {				fnzOnConnect();			}			trgt.parent.removeChild(trgt)		}		function socketBroadOnError(event:Event):void {			trace(event)			clearInterval(c);			trace ("Connection socketBroad faileddddddddddddddddddd!")			var myAlert:Mess = new Mess(200, 100, "ALERT", "Drag this window on the monitor extension\n\nthat you want to use and then click OK\n\n", this.trgt.myRetry);			trgt.parent.addChild(myAlert);		}		function socketBroadOnData(event:DataEvent):void {			//trace ("socketBroad.onData "+event.data)			trace ("socketBroad.onData "+this)			if (fnzOnData is Function) {				trace ("socketBroad.onData "+fnzOnData)				fnzOnData(event.data);			}		}		function socketOnConnect(event:DataEvent):void {			trace(event)			clearInterval(c);			socket.send("<m>bella</m>");			//var tmp = new XML("<playlist name=\"channels\"><mov m=\"ahoo\" val=\"ahoo_800_600_18001\"/></playlist>");			//this.trgt.createList(tmp);			trace ("Connection succeeded!")		}		function socketOnError(event:Event):void {			trace ("Connection failed!")			var myAlert:Mess = new Mess(200, 100, "ALERT", "Run  FLxERsocketServer.jar an then click OK\n\n", this.trgt.myRetry);			trgt.parent.addChild(myAlert);		}		function socketOnData(event:DataEvent):void {			trace(event)			var tmp:XMLDocument = new XMLDocument()			tmp.ignoreWhite = true;			tmp.parseXML(event.data);			var b:uint;			if (this.firstTime) {				trgt.createList(tmp)				this.firstTime = false;				for (b=0; b<tmp.childNodes[0].childNodes.length; b++) {					trace("OOOOOOOOOOOOOOOOOOOOOOOOOOOOO "+tmp.childNodes[0].childNodes[b])				}			} else if (broadName) {				for (b=0; b<tmp.childNodes[0].childNodes.length; b++) {					if (tmp.childNodes[0].childNodes[b].attributes.m == broadName) {						myConnectorBroad(tmp.childNodes[0].childNodes[b].attributes.val.split(","));						broadName = undefined;					}				}			} 		}		public function myConnector(s:String):void {			server = s;			c = setInterval(unableToConnect, 3000);			this.socket.connect(server, 18000)		}		public function newBroadcast(s:String):void {			this.broadName = s;			socket.send("<m>create:"+s+":"+Preferences.pref.w+":"+Preferences.pref.h+"</m>");		}		public function myConnectorBroad(a:Array):void {			var monObj = new Object();			monObj.monWidth = a[1];			monObj.monHeight = a[2];			Preferences.pref.monObj = monObj;			c = setInterval(unableToConnect, 3000);			socketBroad.connect(server, a[3])		}		function unableToConnect():void {			clearInterval(c);			trace("unableToConnect "+server)		}	}}