package FLxER.core {	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.ui.Keyboard;	import flash.ui.Mouse;	import flash.utils.getTimer;	public class KeyboardIn {		private var a:uint;		private var mouseShow:Boolean;		private var MF:String;		public var pressedA:Object;		public function KeyboardIn():void {			Preferences.myKeyboardIn = this;			pressedA = new Object();			myEnable();		}		public function myEnable():void {			// KEYBOARD LISTNER ////////			trace("// myEnable KEYBOARD LISTNER ////////"+Preferences.interfaceTrgt.parent)			Preferences.interfaceTrgt.parent.stage.addEventListener(KeyboardEvent.KEY_DOWN, myOnKeyDown);  			Preferences.interfaceTrgt.parent.stage.addEventListener(KeyboardEvent.KEY_UP, myOnKeyUp);  		}		public function myDisable():void {			// KEYBOARD LISTNER ////////			trace("// myDisable KEYBOARD LISTNER ////////")			Preferences.interfaceTrgt.parent.stage.removeEventListener(KeyboardEvent.KEY_DOWN, myOnKeyDown);  			Preferences.interfaceTrgt.parent.stage.removeEventListener(KeyboardEvent.KEY_UP, myOnKeyUp);  		}		private function myOnKeyDown(event:KeyboardEvent):void {			var myCode:uint = event.keyCode;			pressedA["key"+myCode] = true;			trace("myOnKeyDown"+myCode)			switch (myCode) {				// E			case 69 :				break;				// D			case 68 :								Preferences.monitorTrgt.fondo.enabled = !Preferences.monitorTrgt.fondo.enabled;				break;				// M			case 77 :				if (mouseShow) {					Mouse.show();				} else {					Mouse.hide();				}				mouseShow = !mouseShow;				break;				// pgup			case 33 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myLibSel.scrolla(-1);				break;				// pgdown			case 34 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myLibSel.scrolla(1);				break;				// U			case 85 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myBlend.scrolla(-1);				break;				// J			case 74 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myBlend.scrolla(1);				break;				// I			case 73 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myWipe.scrolla(-1);				break;				// K			case 75 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myWipe.scrolla(1);				break;				// +			case 107 :			case 187 :			case 221 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myTrasform.w_m.scrolla(1);				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myTrasform.h_m.scrolla(1);				break;				// -			case 109 :			case 191 :			case 189 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myTrasform.w_m.scrolla(-1);				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myTrasform.h_m.scrolla(-1);				break;				// Q			case 81 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySlider.muovi(-1);				break;				// A			case 65 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySlider.muovi(1);				break;				//////////////////////////////////////				// Z			case 90 :				//Mouse.hide();				if (pressedA["key"+Keyboard.CONTROL]) {					MF = "mouseRotateZ";				} else {					MF = "mouseZoom";				}				Preferences.interfaceTrgt.parent.stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseListener);				//_root.onEnterFrame = mouseZoom;				break;				// S			case 83 :				//Mouse.hide();				MF = "mouseScratch";	            Preferences.interfaceTrgt.parent.stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseListener);				break;				// RGB			case 82 :			case 71 :			case 66 :				//Mouse.hide();				MF = "mouseColors";	            Preferences.interfaceTrgt.parent.stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseListener);				break;				// IMAGE				// Y			case 89 :				if (pressedA["key"+Keyboard.CONTROL]) {					MF = "mouseRotateY";				} else {					//Mouse.hide();					MF = "mouseImage";				}				Preferences.interfaceTrgt.parent.stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseListener);				break;			case 79 :			case 80 :			case 86 :			case 78 :				//Mouse.hide();				MF = "mouseImage";				Preferences.interfaceTrgt.parent.stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseListener);				break;				// W			case 87 :				//Mouse.hide();				MF = "mouseSlide";				Preferences.interfaceTrgt.parent.stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseListener);				break;				/*//SHIFT				case Keyboard.SHIFT :				myShift();				break;*/			case Keyboard.DOWN :				if (pressedA["key"+Keyboard.CONTROL]) {					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySwapDepth(-1);				} else if (pressedA["key"+Keyboard.SHIFT]) {					if (Preferences.starterTrgt.myTreDengine.active) {						Preferences.starterTrgt.myTreDengine.avvia()					}				} else {					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myFileSel.scrolla(1);				}				break;			case Keyboard.UP :				if (pressedA["key"+Keyboard.CONTROL]) {					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySwapDepth(1);				} else if (pressedA["key"+Keyboard.SHIFT]) {					if (Preferences.starterTrgt.myTreDengine.active) {						Preferences.starterTrgt.myTreDengine.avvia()					}				} else {					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myFileSel.scrolla(-1);				}				break;				// SPACE			case Keyboard.SPACE :				if (pressedA["key"+Keyboard.CONTROL] && pressedA["key"+Keyboard.SHIFT]) {					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myController.mySolo.mouseDownHandler(null);				} else if (pressedA["key"+Keyboard.CONTROL]) {					if (Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySequencer.seqStatus) {						Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySequencer.keyControl(4);					}					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myController.myHide.mouseDownHandler(null);				} else if (pressedA["key"+Keyboard.SHIFT]) {					for (var a:int = 0; a<Preferences.pref.nCh; a++) {						if (Preferences.interfaceTrgt.chCnt["ch_"+a].mySequencer.seqStatus) {							Preferences.interfaceTrgt.chCnt["ch_"+a].mySequencer.keyControl(1);						}						Preferences.interfaceTrgt.chCnt["ch_"+a].myController.myPlay.mouseDownHandler(null);					}				} else {					if (Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySequencer.seqStatus) {						Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySequencer.keyControl(1);					}					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myController.myPlay.mouseDownHandler(null);				}				break;				// LEFT			case Keyboard.LEFT :				if (pressedA["key"+Keyboard.SHIFT]) {					if (Preferences.starterTrgt.myTreDengine.active) {						Preferences.starterTrgt.myTreDengine.avvia()					}				} else {					if (Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySequencer.seqStatus) {						Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySequencer.keyControl(3);					}					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myController.myRew.mouseDownHandler(null);				}				break;				// RIGHT			case Keyboard.RIGHT :				if (pressedA["key"+Keyboard.SHIFT]) {					if (Preferences.starterTrgt.myTreDengine.active) {						Preferences.starterTrgt.myTreDengine.avvia()					}				}				break;				// T			case 84 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myTapper.takeTap(true);				break;				// X			case 88 :				if (pressedA["key"+Keyboard.SHIFT]) {					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].eject(null);				} else if (pressedA["key"+Keyboard.CONTROL]) {					MF = "mouseRotateX";					Preferences.interfaceTrgt.parent.stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseListener);				} else {					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myTrasform.resetta(null);				}				break;				// L			case 76 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myLockWipe.mouseDownHandler(null);				break;				// H			/*			case 72 :				Preferences.myGlobalCtrl.puls1.mouseDownHandler(null);				break;				// C			*/			case 70 :				if (Preferences.pref.myMode==0) {					Preferences.myGlobalCtrl.puls4.mouseDownHandler(null);				}				break;				// 1			case 49 :				Preferences.interfaceTrgt.chCnt.ch_0.change_ch();				break;				// 2			case 50 :				Preferences.interfaceTrgt.chCnt.ch_1.change_ch();				break;				// 3			case 51 :				Preferences.interfaceTrgt.chCnt.ch_2.change_ch();				break;				// 4			case 52 :				Preferences.interfaceTrgt.chCnt.ch_3.change_ch();				break;				// 5			case 53 :				Preferences.interfaceTrgt.chCnt.ch_4.change_ch();				break;				// 6			case 54 :				Preferences.interfaceTrgt.chCnt.ch_5.change_ch();				break;				// 7			case 55 :				Preferences.interfaceTrgt.chCnt.ch_6.change_ch();				break;			}		}		public function myOnKeyUp(event:KeyboardEvent):void {			if (event && event.keyCode)				var myCode:uint = event && event.keyCode ? event.keyCode : 0;			pressedA["key"+myCode] = false;			trace("onKeyUp"+myCode)			if 	(Preferences.interfaceTrgt.parent.stage.hasEventListener(MouseEvent.MOUSE_MOVE)) {				Preferences.interfaceTrgt.parent.stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseListener)			}			switch (myCode) {				// E			case 69 :					break;			case 90 :			case 83 :			case 82 :			case 71 :			case 66 :			case 89 :			case 79 :			case 80 :			case 86 :			case 78 :			case 87 :				Mouse.show();				break;				// pgup			case 33 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myLibSel.seleziona(0);				break;				// pgdown			case 34 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myLibSel.seleziona(0);				break;				// U			case 85 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myBlend.seleziona(0);				break;				// J			case 74 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myBlend.seleziona(0);				break;				// I			case 73 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myWipe.seleziona(0);				break;				// K			case 75 :				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myWipe.seleziona(0);				break;			case Keyboard.DOWN :				if (pressedA["key"+Keyboard.CONTROL]) {				} else if (pressedA["key"+Keyboard.SHIFT]) {				} else {					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myFileSel.seleziona(0);				}				/*				*/				break;			case Keyboard.UP :				if (pressedA["key"+Keyboard.CONTROL]) {				} else if (pressedA["key"+Keyboard.SHIFT]) {				} else {					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myFileSel.seleziona(0);				}				break;			/*			case Keyboard.SPACE :				if (pressedA["key"+Keyboard.CONTROL] && pressedA["key"+Keyboard.SHIFT]) {					Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].mySequencer.mySolo.onRelease();				}				*/			}		}		private function mouseListener(event:Event):void {			trace(MF)			this[MF]()		}		// MIDI MOUSE ////		private function mouseZoom():void {			if (pressedA["key"+Keyboard.SHIFT]) {				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myTrasform.mouseScale(Preferences.interfaceTrgt.mouseX/10, Preferences.interfaceTrgt.mouseX/10);			} else {				Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myTrasform.mouseScale(Preferences.interfaceTrgt.mouseX/10, Preferences.interfaceTrgt.mouseY/10);			}/**/		}		private function mouseRotateX():void {			mouseRotateMidiX(Preferences.interfaceTrgt.mouseX/2.2222222, Preferences.pref.ch);		}		private function mouseRotateY():void {			mouseRotateMidiY(Preferences.interfaceTrgt.mouseX/2.2222222, Preferences.pref.ch);		}		private function mouseRotateZ():void {			mouseRotateMidiZ(Preferences.interfaceTrgt.mouseX/2.2222222, Preferences.pref.ch);		}		private function mouseRotateMidiX(p:Number, ch:uint):void {			Preferences.interfaceTrgt.chCnt["ch_"+ch].myTrasform.mouseRotationChX(p);		}		private function mouseRotateMidiY(p:Number, ch:uint):void {			Preferences.interfaceTrgt.chCnt["ch_"+ch].myTrasform.mouseRotationChY(p);		}		private function mouseRotateMidiZ(p:Number, ch:uint):void {			Preferences.interfaceTrgt.chCnt["ch_"+ch].myTrasform.mouseRotationChZ(p);		}		private function mouseImage():void {			if (pressedA["key"+89]) {				// val 0 360				changeMatrix(int((Preferences.interfaceTrgt.mouseX/1000)*360), "hueSlider", Preferences.pref.ch);			}			if (pressedA["key"+79]) {				// val -300 300				changeMatrix(int(((Preferences.interfaceTrgt.mouseX/1000)*(300+300))-300), "satSlider", Preferences.pref.ch);			}			if (pressedA["key"+80]) {				// val -200,500				changeMatrix(int(((Preferences.interfaceTrgt.mouseX/1000)*(500+200))-200), "conSlider", Preferences.pref.ch);			}			if (pressedA["key"+86]) {				// val -255 255				changeMatrix(int((Preferences.interfaceTrgt.mouseX-400)/1.5686), "briSlider", Preferences.pref.ch);			}			if (pressedA["key"+78]) {				// val 0 255				changeMatrix(int(Preferences.interfaceTrgt.mouseX/3.1372), "thrSlider", Preferences.pref.ch);			}		}		private function mouseScratch():void {			mouseScratchMidi(Preferences.interfaceTrgt.mouseX/1000, Preferences.pref.ch);		}		private function mouseScratchMidi(p:Number, ch:uint):void {			Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",SCRATCH,"+Preferences.pref.ch+","+p);		}		private function mouseColors():void {			var val:int;			if (pressedA["key"+Keyboard.SHIFT]) {				val = int((Preferences.interfaceTrgt.mouseX/1000)*255);				if (pressedA["key"+82]) {					changeCol(val, "rbSlider", Preferences.pref.ch);					//changeCol((((Preferences.interfaceTrgt.mouseX/1000)*510)-255), "rbSlider", Preferences.pref.ch);				}				if (pressedA["key"+71]) {					changeCol(val, "gbSlider", Preferences.pref.ch);				}				if (pressedA["key"+66]) {					changeCol(val, "bbSlider", Preferences.pref.ch);				}			} else {				val = int(((Preferences.interfaceTrgt.mouseX/1000)*510)-255)				if (pressedA["key"+82]) {					changeCol(val, "rSlider",Preferences.pref.ch);				}				if (pressedA["key"+71]) {					changeCol(val, "gSlider", Preferences.pref.ch);				}				if (pressedA["key"+66]) {					changeCol(val, "bSlider", Preferences.pref.ch);				}			}		}		private function changeCol(p:Number, trgt:String, ch:uint):void {			trace("changeCol  "+p)			Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myColors[trgt].setVal(p);		}		private function changeMatrix(p:Number, trgt:String, ch:uint):void {			Preferences.interfaceTrgt.chCnt["ch_"+Preferences.pref.ch].myImage[trgt].setVal(p);		}		private function mouseSlide():void {			mouseSlideAct(Preferences.interfaceTrgt.mouseY/6,Preferences.pref.ch);		}		private function mouseSlideAct(p:Number, ch:uint):void {			Preferences.interfaceTrgt.chCnt["ch_"+ch].mySlider.setVal(p);		}		public function myMidi(myCode:String, val:Number, ch:uint):void {			trace("myMidi myCode: "+myCode+" val: "+val+" ch: "+ch);			switch (myCode) {			case "mouseShowHide" :				if (mouseShow) {					Mouse.show();				} else {					Mouse.hide();				}				mouseShow = !mouseShow;				break;			case "libraryScroller" :				// val 1 -1				Preferences.interfaceTrgt.chCnt["ch_"+ch].myLibSel.scrolla(val);				Preferences.interfaceTrgt.chCnt["ch_"+ch].myLibSel.seleziona(0);				break;			case "blendScroller" :				// val 1 -1				Preferences.interfaceTrgt.chCnt["ch_"+ch].myBlend.scrolla(val);				Preferences.interfaceTrgt.chCnt["ch_"+ch].myBlend.seleziona(0);				break;			case "wipeScroller" :				// val 1 -1				Preferences.interfaceTrgt.chCnt["ch_"+ch].myWipe.scrolla(val);				Preferences.interfaceTrgt.chCnt["ch_"+ch].myWipe.seleziona(0);				break;			case "zoomOneByOne" :				// val 1 -1				Preferences.interfaceTrgt.chCnt["ch_"+ch].myTrasform.w_m.scrolla(val);				Preferences.interfaceTrgt.chCnt["ch_"+ch].myTrasform.h_m.scrolla(val);				break;			case "zoomOneByOneX" :				// val 1 1600				trace("zoomX "+val)				Preferences.interfaceTrgt.chCnt["ch_"+ch].myTrasform.w_m.scrolla(val);				break;			case "quickContent" :				// val n				//Preferences.interfaceTrgt.chCnt["ch_"+ch].myFileSel.conta = 0;				Preferences.interfaceTrgt.chCnt["ch_"+ch].myFileSel.seleziona(val);				break;			case "sliderOneByOne" :				// val 1 -1				Preferences.interfaceTrgt.chCnt["ch_"+ch].keySlider(val);				break;			case "rotateX" :				// val 1 1600				mouseRotateMidiX(val, ch);				break;			case "rotateY" :				// val 1 1600				mouseRotateMidiY(val, ch);				break;			case "rotateZ" :				// val 1 1600				mouseRotateMidiZ(val, ch);				break;			case "zoom" :				// val 1 1600				Preferences.interfaceTrgt.chCnt["ch_"+ch].myTrasform.w_m.scrolla(val);				Preferences.interfaceTrgt.chCnt["ch_"+ch].myTrasform.h_m.scrolla(val);				break;			case "scratch" :				// val 0 1000				mouseScratchMidi(val/1000,ch);				break;			case "bkgOnOff" :				// val 				Preferences.interfaceTrgt.chCnt["ch_"+ch].myColors.myBkgOnOff.mouseDownHandler(null);				break;			case "colOnOff" :				// val 				Preferences.interfaceTrgt.chCnt["ch_"+ch].myColors.col_onoff.mouseDownHandler(null);				break;			case "redMovie" :				// val -255 255				changeCol(val, "rSlider", ch);				break;			case "greenMovie" :				// val -255 255				changeCol(val, "gSlider", ch);				break;			case "bluMovie" :				// val -255 255				changeCol(val, "bSlider", ch);				break;			case "redMovieB" :				// val -255 255				changeCol(val, "rbSlider", ch);				break;			case "greenMovieB" :				// val -255 255				changeCol(val, "gbSlider", ch);				break;			case "bluMovieB" :				// val -255 255				changeCol(val, "bbSlider", ch);				break;				// W			case "slider" :				// val 0 100				trace("val "+val)				trace("ch "+ch)				mouseSlideAct((val-100)*-1, ch);				break;			case "moveDown" :				Preferences.interfaceTrgt.chCnt["ch_"+ch].down.mouseDownHandler(null);				break;			case "moveUp" :				Preferences.interfaceTrgt.chCnt["ch_"+ch].up.mouseDownHandler(null);				break;			case "movieScroller" :				// val 1 -1				Preferences.interfaceTrgt.chCnt["ch_"+ch].myFileSel.scrolla(val);				Preferences.interfaceTrgt.chCnt["ch_"+ch].myFileSel.seleziona(0);				break;			case "hideShow" :				if (Preferences.interfaceTrgt.chCnt["ch_"+ch].mySequencer.seqStatus) {					Preferences.interfaceTrgt.chCnt["ch_"+ch].mySequencer.keyControl(4);				}				Preferences.interfaceTrgt.chCnt["ch_"+ch].myController.myHide.mouseDownHandler(null);				break;			case "soloPress" :				Preferences.interfaceTrgt.chCnt["ch_"+ch].myController.mySolo.mouseDownHandler(null);				break;			case "stopPlay" :				if (Preferences.interfaceTrgt.chCnt["ch_"+ch].mySequencer.seqStatus) {					Preferences.interfaceTrgt.chCnt["ch_"+ch].mySequencer.keyControl(1);				}				Preferences.interfaceTrgt.chCnt["ch_"+ch].myController.myPlay.mouseDownHandler(null);				break;			case "rewind" :				if (Preferences.interfaceTrgt.chCnt["ch_"+ch].mySequencer.seqStatus) {					Preferences.interfaceTrgt.chCnt["ch_"+ch].mySequencer.keyControl(3);				}				Preferences.interfaceTrgt.chCnt["ch_"+ch].myController.myRew.mouseDownHandler(null);				break;			case "tap" :				Preferences.interfaceTrgt.chCnt["ch_"+ch].myTapper.takeTap(true);				break;			case "live" :				Preferences.interfaceTrgt.chCnt["ch_"+ch].out_onoff.mouseDownHandler(null);				break;			case "eject" :				Preferences.interfaceTrgt.chCnt["ch_"+ch].eject(null);				break;			case "reset" :				Preferences.interfaceTrgt.chCnt["ch_"+ch].myTrasform.resetta(null);				break;			case "lockWipes" :				Preferences.interfaceTrgt.chCnt["ch_"+ch].myLockWipe.mouseDownHandler(null);				break;			/*			case "hiQuality" :				Preferences.myGlobalCtrl.puls1.mouseDownHandler(null);				break;			*/			case "fullScreen" :				Preferences.myGlobalCtrl.puls4.mouseDownHandler(null);				break;			case "changeChannel" :				// val 2 a numero ch in flxerPref.xml				Preferences.interfaceTrgt.chCnt["ch_"+ch].change_ch();				break;			case "hueMovie" :				// val 0 360				changeMatrix(val, "hueSlider", ch);				break;			case "satMovie" :				// val -300 300				changeMatrix(val, "satSlider", ch);				break;			case "conMovie" :				// val -200,500				changeMatrix(val, "conSlider", ch);				break;			case "briMovie" :				// val -255 255				changeMatrix(val, "briSlider", ch);				break;			case "thrMovie" :				// val 0 255				changeMatrix(val, "thrSlider", ch);				break;			case "thrOnOff" :				Preferences.interfaceTrgt.chCnt["ch_"+ch].myImage.thrOnOff.mouseDownHandler(null);				break;			}		}	}}