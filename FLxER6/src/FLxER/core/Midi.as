package FLxER.core {    import flash.net.XMLSocket;	import flash.events.*;	//import flash.net.URLRequest;	public class Midi {		private var mySocket:XMLSocket;		private var IPaddress:String;		private var port:uint;		public function Midi():void {			IPaddress = "localhost";			port = 7777;			connect();		}		private function connect():void {			trace("connect");			mySocket = new XMLSocket();            mySocket.addEventListener(Event.CONNECT, handleConnect);            mySocket.addEventListener(DataEvent.DATA, handleIncoming);            mySocket.addEventListener(Event.CLOSE, handleClose);            mySocket.addEventListener(IOErrorEvent.IO_ERROR, handleOnError);            mySocket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleOnError);			mySocket.connect(IPaddress, port);			trace(IPaddress+" "+port);		}		private function disconnect():void {			mySocket.close();			//mySocket.connected = false;		}		private function handleOnError(event:Event):void {			trace("handleOnError "+event)			Preferences.myGlobalCtrl.puls2.myStatus_swap();			//mySocket.connected = false;		}		private function handleIncoming(event:DataEvent):void {			var xmlIn:String = event.data;			trace("handleIncoming "+xmlIn)			//xmlIn = "libraryScroller,1,2"			var tmp:Array = xmlIn.toString().split(",");			var myCh:uint;			if (!tmp[2] || tmp[2] == "auto" || isNaN(parseInt(tmp[2]))) {				myCh = Preferences.pref.ch;			} else {				myCh = parseInt(tmp[2]);			}				/*trace("tmp[0] "+tmp[0]);			trace("tmp[1] "+tmp[1]);			trace("tmp[2] "+tmp[2]);*/			Preferences.myKeyboardIn.myMidi(tmp[0], parseInt(tmp[1]), myCh)		}		private function handleConnect(event):void {			trace("handleConnect"+event);			//mySocket.connected = true;		}		private function handleClose():void {			//mySocket.connected = false;		}		/*function parseMessages(node):void {			if (node.nodeName == "MESSAGE") {				var name = node.attributes.NAME;				child = node.firstChild;				if (name == "control1") {					_root.myToolbarTop.palettes.Trasform.myTrgt.myDragMidi("r,CM,CMT,rb", parseFloat(child.attributes.VALUE));				}				if (name == "control2") {					_root.myToolbarTop.palettes.Trasform.myTrgt.myDragMidi("g,CM,CMT,gb", parseFloat(child.attributes.VALUE));				}				if (name == "control3") {					_root.myToolbarTop.palettes.Trasform.myTrgt.myDragMidi("b,CM,CMT,bb", parseFloat(child.attributes.VALUE));				}				if (name == "sy") {					_root.sy = child.attributes.VALUE;				}				if (name == "zx") {					_root.zx = child.attributes.VALUE;				}				if (name == "zy") {					_root.zy = child.attributes.VALUE;				}				// loop over the arguments of the message 				for (var child = node.firstChild; child != null; child=child.nextSibling) {					if (child.nodeName == "ARGUMENT") {					}				}			} else {				// look recursively for a message node				for (var child = node.firstChild; child != null; child=child.nextSibling) {					parseMessages(child);				}			}		}		function sendOSC(name, arg, destAddr, destPort) {			mySocket.send(xmlOut);		}*/	}}