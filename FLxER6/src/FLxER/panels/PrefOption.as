package FLxER.panels {	import flash.events.Event;	import flash.filesystem.File;	import flash.xml.XMLNode;		import FLxER.comp.ButtonTxt;	import FLxER.comp.CheckBoxBase;	import FLxER.main.Txt;	import FLxER.panels.Palette;

//	import FLxER.panels.GlobalCtrl;//	import flash.filesystem.File;//	import flash.events.*;//	import flash.filesystem.*;	public class PrefOption extends Palette {		private var myXml:XMLNode;		private var cntObj:Object;		private var callback:Function;		private var onclose:Function;		public function PrefOption(w:uint,h:uint,t:String,fnz:Function,fnzclose:Function):void {			super(w,h,t,"");			callback = fnz;			onclose = fnzclose;			callback = fnz;			//var mode0 = new ButtonTxt(50, 55, 150, 15, "CLONE MONITOR", fnz, 0, "");			//cntObj.addChild(mode0);			//myXml = Preferences.pref.flxerPref; 			cntObj = new Object();			cntObj.chFLL		= new Txt(5, 25, 0, 15, "Number of channels", Preferences.ts, null);			cntObj.chF 			= new Txt(125, 25, 20, 15, Preferences.pref.nCh, Preferences.th, "input");			//cntObj.chFL			= new Txt(150, 25, 0, 15, "ch (min 2)", Preferences.ts, null);			//			cntObj.netL 		= new Txt(5, 45, 0, 15, "If a media file is unavailable look for it on the net", Preferences.ts, null);			var tmp:Boolean;			trace ("LOAD FROM THE NET "+tmp)			cntObj.netB 		= new CheckBoxBase(250, 45, 15, 15, "LOAD FROM THE NET ", loadDvIn, null, Preferences.pref.serverLibrary.useServer);			//			cntObj.ch 			= new Txt(5, 65, 0, 15, "Server", Preferences.ts, null);			cntObj.netF 		= new Txt(50, 65, 300, 15,Preferences.pref.serverLibrary.value, Preferences.th, "input");			//			cntObj.kL 			= new Txt(5, 85, 0, 15, "View keyboard shortcuts baloon", Preferences.ts, null);			cntObj.kB 			= new CheckBoxBase(180, 85, 15, 15, "VIEW KEYBOARD SHORTCUT ", loadDvIn, null, Preferences.pref.vKS);			//			cntObj.treL 		= new Txt(5, 110, 0, 15, "3D ENGINE", Preferences.ts, null);			//			cntObj.treL0 		= new Txt(15, 125, 0, 15, "Smooth Stop", Preferences.ts, null);			cntObj.smooth 		= new CheckBoxBase(140, 125, 15, 15, "SMOOTH STOP ", loadDvIn, null, Preferences.pref.smoothStop);			//			cntObj.treL1 		= new Txt(15, 145, 0, 15, "Alpha ", Preferences.ts, null);			cntObj.myAlpha 		= new CheckBoxBase(140, 145, 15, 15, "ALPHA ", loadDvIn, null, Preferences.pref.zalpha);			//			cntObj.treL2 		= new Txt( 15, 165, 0, 15, "Z channels distance", Preferences.ts, null);			cntObj.distance 	= new Txt(140, 165, 40, 15, Preferences.pref.zvalue, Preferences.th, "input");			cntObj.treL3 		= new Txt(185, 165, 0, 15, "Z value", Preferences.ts, null);			//			cntObj.colL 		= new Txt(        5, 190, 0, 15, "INTERFACE COLORS", Preferences.ts, null);			cntObj.defaultWhite = new ButtonTxt(150, 190, 0, 15, "DEFAULT WHITE", resetCol, "w", null);			cntObj.defaultBlack = new ButtonTxt(250, 190, 0, 15, "DEFAULT BLACK", resetCol, "b", null);			//			cntObj.col 			= new Txt(  5, 210, 0, 15, "Main color", Preferences.ts, null);			cntObj.colF 		= new Txt(110, 210, 50, 15, Preferences.pref.myCol.col, Preferences.th, "input");			//			cntObj.bkgCol 		= new Txt(  5, 230, 0, 15, "Backgrounds color", Preferences.ts, null);			cntObj.bkgColF 		= new Txt(110, 230, 50, 15, Preferences.pref.myCol.bkgCol, Preferences.th, "input");			//			cntObj.bkgColOver 	= new Txt(  5, 250, 0, 15, "Overs color", Preferences.ts, null);			cntObj.bkgColOverF 	= new Txt(110, 250, 50, 15, Preferences.pref.myCol.bkgColOver, Preferences.th, "input");			//			cntObj.brdCol 		= new Txt(170, 210, 0, 15, "Borders color", Preferences.ts, null);			cntObj.brdColF 		= new Txt(275, 210, 50, 15, Preferences.pref.myCol.brdCol, Preferences.th, "input");			//			cntObj.pltCol 		= new Txt(170, 230, 0, 15, "Palettes color", Preferences.ts, null);			cntObj.pltColF 		= new Txt(275, 230, 50, 15, Preferences.pref.myCol.pltCol, Preferences.th, "input");			//			cntObj.monCol 		= new Txt(170, 250, 0, 15, "Monitor color", Preferences.ts, null);			cntObj.monColF 		= new Txt(275, 250, 50, 15, Preferences.pref.myCol.monCol, Preferences.th, "input");				//			cntObj.resizL 		= new Txt(5, 275, 0, 15, "AUTO RESIZE MODE", Preferences.ts, null);			//			cntObj.resiz0L 		= new Txt(15, 295, 0, 15, "Active", Preferences.ts, null);			cntObj.resiz0 		= new CheckBoxBase(cntObj.resiz0L.x+cntObj.resiz0L.width, 295, 15, 15, "AUTO RESIZE ACTIVE ", setResizeOnOff, null, Preferences.pref.resizzaMode == 0 ? false : true);			//			cntObj.resiz1L 		= new Txt(cntObj.resiz0.x+cntObj.resiz0.width+20, 295, 0, 15, "Fit on biggest side ", Preferences.ts, null);			cntObj.resiz1 		= new CheckBoxBase(cntObj.resiz1L.x+cntObj.resiz1L.width-5, 295, 15, 15, "STATUS ", setResizeMode1, null, Preferences.pref.resizzaMode == 1 ? true : false);			if (Preferences.pref.resizzaMode == 0) cntObj.resiz1.myDisable();			//			cntObj.resiz2L 		= new Txt(cntObj.resiz1.x+cntObj.resiz1.width+20, 295, 0, 15, "Fit on smallest side ", Preferences.ts, null);						cntObj.resiz2 		= new CheckBoxBase(cntObj.resiz2L.x+cntObj.resiz2L.width-5, 295, 15, 15, "STATUS ", setResizeMode2, null, Preferences.pref.resizzaMode == 2 ? true : false);			if (Preferences.pref.resizzaMode == 0) cntObj.resiz2.myDisable();						cntObj.bmp0 		= new Txt(5, 320, 0, 15, "Bitmap Output Rendering", Preferences.ts, null);			cntObj.bmpF 		= new CheckBoxBase(cntObj.bmp0.x+cntObj.bmp0.width, 320, 15, 15, "Bitmap Output ", loadDvIn, null, Preferences.pref.bitmap);			cntObj.flxerFolderT	= new Txt(5, 345, 0, 15, "FLxER Folder", Preferences.ts, null);			cntObj.flxerFolder	= new Txt(80, 345, 250, 15, Preferences.pref.flxerFolder, Preferences.ts, null);			cntObj.flxerFolder.backgroundColor = Preferences.pref.myCol.bkgCol;			cntObj.flxerFolder.background = true;			cntObj.flxerFolderB	= new ButtonTxt(340, 345, 50, 15, "MOVE", selectDirectory, null, null);			//			cntObj.monObj	 	= new Txt(  5, 370, 0, 15, "Monitor size", Preferences.ts, null);			cntObj.monWidthF 	= new Txt(110, 370, 50, 15, Preferences.pref.monObjDefault.monWidth, Preferences.th, (Preferences.monitorOut ? "" : "input"));			cntObj.monWidthL 	= new Txt(170, 370, 0, 15, "Width", Preferences.ts, null);			//			cntObj.monHeightF 	= new Txt(275, 370, 50, 15, Preferences.pref.monObjDefault.monHeight, Preferences.th, (Preferences.monitorOut ? "" : "input"));			cntObj.monHeightL 	= new Txt(335, 370, 0, 15, "Height", Preferences.ts, null);			//			cntObj.pulsSave 	= new ButtonTxt(220, 400, 50, 15, "SAVE", mySave, null, null);			cntObj.pulsCancel 	= new ButtonTxt(280, 400, 50, 15, "CANCEL", myCancel, null, null);			cntObj.pulsReset 	= new ButtonTxt(340, 400, 50, 15, "RESET", myReset, null, null);			for (var item:* in cntObj) {				this.palette.stage.addChild(cntObj[item])			}		}		private function selectDirectory(p:String):void {			var directory:File = File.documentsDirectory;			directory.browseForDirectory("Select Directory");			directory.addEventListener(Event.SELECT, directorySelected);		}		private function directorySelected(event:Event):void {			cntObj.flxerFolder.text = event.target.nativePath+"/FLxER-Folder";		}		private function setResizeMode1(p:Boolean):void {			cntObj.resiz2.myStatus = true;			cntObj.resiz2.myStatus_swap();		}		private function setResizeMode2(p:Boolean):void {			cntObj.resiz1.myStatus = true;			cntObj.resiz1.myStatus_swap();		}		private function setResizeOnOff(p:Boolean):void {			if (p) {				cntObj.resiz1.myEnable();				cntObj.resiz2.myEnable();				cntObj.resiz1L.alpha = 1;				cntObj.resiz2L.alpha = 1;			} else {				cntObj.resiz1.myDisable();				cntObj.resiz2.myDisable();				cntObj.resiz1L.alpha = .6;				cntObj.resiz2L.alpha = .6;			}		}		private function loadDvIn(p:Boolean):void {		}		private function mySave(p:String):void {			Preferences.deepTrace(Preferences.pref)			//Preferences.deepTrace((Preferences.pref));			//trace(JSON.stringify(Preferences.pref));			if (Preferences.pref.flxerFolder != cntObj.flxerFolder.text) {				Preferences.starterTrgt.moveFlxerFolder(cntObj.flxerFolder.text);					}			Preferences.pref.nCh = parseInt(cntObj.chF.text);			Preferences.pref.serverLibrary.useServer = cntObj.netB.myStatus;			Preferences.pref.serverLibrary.value = cntObj.netF.text;			Preferences.pref.vKS = cntObj.kB.myStatus;			Preferences.pref.smoothStop = cntObj.smooth.myStatus;			Preferences.pref.zalpha = cntObj.myAlpha.myStatus;			Preferences.pref.zvalue = cntObj.distance.text;			if (cntObj.resiz0.myStatus) {				if (cntObj.resiz1.myStatus) {					Preferences.pref.resizzaMode = 1;				} else {					Preferences.pref.resizzaMode = 2;				}			} else {				Preferences.pref.resizzaMode = 0;			}						Preferences.pref.myCol.col = cntObj.colF.text;			Preferences.pref.myCol.bkgCol = cntObj.bkgColF.text;			Preferences.pref.myCol.bkgColOver = cntObj.bkgColOverF.text;			Preferences.pref.myCol.brdCol = cntObj.brdColF.text;			Preferences.pref.myCol.pltCol = cntObj.pltColF.text;			Preferences.pref.myCol.monCol = cntObj.monColF.text;			Preferences.pref.bitmap = cntObj.bmpF.myStatus;			Preferences.updateColObj();			//parent.myPrefSO.data.flxerPref = tmp;			//parent.myPrefSO.flush();			//parent.removeChild(this);			if (Preferences.starterTrgt.outWindow) {				Preferences.starterTrgt.outWindow.stage.displayState = "normal";				Preferences.starterTrgt.outWindow.stage.removeChild(Preferences.monitorOut);				Preferences.starterTrgt.outWindow.close();				Preferences.starterTrgt.outWindow = undefined;			}			Preferences.pref.monObjDefault.monWidth = cntObj.monWidthF.text;			Preferences.pref.monObjDefault.monHeight = cntObj.monHeightF.text;			Preferences.deepTrace(Preferences.pref)			callback(); 			Preferences.starterTrgt.reDraw()			this.palette.close();			onclose();		}					private function resetCol(p:String):void {			trace("resetCol"+p)			var obj:Object;			if (p=="w") {				obj = Preferences.colWhite;			} else {				obj = Preferences.colBlack;			}			cntObj.colF.text = obj.col;			cntObj.bkgColF.text = obj.bkgCol;			cntObj.bkgColOverF.text = obj.bkgColOver;			cntObj.brdColF.text = obj.brdCol;			cntObj.pltColF.text = obj.pltCol;			cntObj.monColF.text = obj.monCol;		}		private function myCancel(p:String):void {			this.palette.close();			onclose();		}		private function myReset(p:String):void {			Preferences.starterTrgt.resetta();		}	}}