package FLxER.panels {	import flash.display.Sprite;	import flash.utils.*;	import flash.geom.ColorTransform;	import FLxER.main.Rett;	import FLxER.comp.CheckBoxBase;	import FLxER.comp.SliderColors;		public class ColorsCtrl extends Sprite {		private var vidThumb:Rett;		private var bkgThumb:Rett;		public var col_onoff:CheckBoxBase;		public var myBkgOnOff:CheckBoxBase;		public var rSlider:SliderColors;		public var gSlider:SliderColors;		public var bSlider:SliderColors;		public var rbSlider:SliderColors;		public var gbSlider:SliderColors;		public var bbSlider:SliderColors;		private var ch:uint;		//private var myMovie:Player;		private var myParent:ChCtrl;		public function ColorsCtrl(xx:int,yy:int,pp:ChCtrl,chch:int):void {			ch = chch;			myParent = pp;			//myMovie = Preferences.monitorTrgt.levels["ch_"+ch];			this.x = xx;			this.y = yy;			this.col_onoff = new CheckBoxBase(0, 0, 15, 15, "MOVIE COLOR: ", colOnOff, null, true);			this.addChild(col_onoff);			this.vidThumb = new Rett(0, 16, 15, 31, 0xFFFFFF, -1, 1);			this.addChild(vidThumb);			var bithumb:Rett = new Rett(8, 0, 7, 31, 0x000000, -1, 1);			this.vidThumb.addChild(bithumb);			this.rSlider = new SliderColors(16,  0, 128, 15, 0xFF0000, 0, -255, 255, myColorer, "vid", "R + MOVE X MOUSE",myParent);			this.addChild(rSlider);			this.gSlider = new SliderColors(16, 16, 128, 15, 0x00FF00, 0, -255, 255, myColorer, "vid", "G + MOVE X MOUSE",myParent);			this.addChild(gSlider);			this.bSlider = new SliderColors(16, 32, 128, 15, 0x0000FF, 0, -255, 255, myColorer, "vid", "B + MOVE X MOUSE",myParent);			this.addChild(bSlider);			this.myBkgOnOff = new CheckBoxBase(153, 0, 15, 15, "BACKGROUND COLOR: ", bkgOnOff, null, false);			this.addChild(myBkgOnOff);			this.bkgThumb = new Rett(153, 16, 15, 31, 0xFFFFFF, -1, 1);			this.bkgThumb.transform.colorTransform = new ColorTransform(1, 1, 1, 1, -255, -255, -255, 1);			this.addChild(bkgThumb);			this.rbSlider = new SliderColors(169,  0, 100, 15, 0xFF0000, 255, 0, 255, myColorer, "bkg", "R + SHIFT + MOVE X MOUSE",myParent);			this.addChild(rbSlider);			this.gbSlider = new SliderColors(169, 16, 100, 15, 0x00FF00, 255, 0, 255, myColorer, "bkg", "G + SHIFT + MOVE X MOUSE",myParent);			this.addChild(gbSlider);			this.bbSlider = new SliderColors(169, 32, 100, 15, 0x0000FF, 255, 0, 255, myColorer, "bkg", "B + SHIFT + MOVE X MOUSE",myParent);			this.addChild(bbSlider);		}		public function resetta():void {			myParent.change_ch();			this.col_onoff.resetta();			this.rSlider.resetta();			this.gSlider.resetta();			this.bSlider.resetta();			this.myBkgOnOff.resetta();			this.rbSlider.resetta();			this.gbSlider.resetta();			this.bbSlider.resetta();		}		private function myColorer(p:String,v:int):void {			var myVal:int = -v			var tmp:Array = p.split(",");			var r:Number;			var g:Number;			var b:Number;			if (p=="vid") {				r = rSlider.getVal();				g = gSlider.getVal();				b = bSlider.getVal();			} else {				r = rbSlider.getVal();				g = gbSlider.getVal();				b = bbSlider.getVal();			}			this[p+"Thumb"].transform.colorTransform = new ColorTransform(1, 1, 1, 1, r , g , b, 1)			myParent.lastLiveAct = ",colorizing,"+myParent.ch+","+p+","+r+","+g+","+b;			if (myParent.myMonitorPreviewChannel.myPreviewActive) {				myParent.myMonitorPreviewChannel.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			}			if (myParent.outStatus && col_onoff.myStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.colorizing = myParent.lastLiveAct;			}		}		private function bkgOnOff(p:Boolean):void {			myParent.change_ch();			myParent.lastLiveAct = ",bkgOnOff,"+myParent.ch+","+p;			if (myParent.myMonitorPreviewChannel.myPreviewActive) {				myParent.myMonitorPreviewChannel.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			}			if (myParent.outStatus && col_onoff.myStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.bkgOnOff = myParent.lastLiveAct;			}		}		private function colOnOff(p:Boolean):void {			myParent.change_ch();			var rb:int, gb:int, bb:int;			if (p) {				rb = (this.rSlider.getVal());				gb = (this.gSlider.getVal());				bb = (this.bSlider.getVal());			} else {				rb = gb = bb = 0;			}			myParent.lastLiveAct = ",colorizing,"+myParent.ch+",vid,"+rb+","+gb+","+bb;			if (myParent.myMonitorPreviewChannel.myPreviewActive) {				myParent.myMonitorPreviewChannel.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			}			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.colorizing = myParent.lastLiveAct;			}		}	}}