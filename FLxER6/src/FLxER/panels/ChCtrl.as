package FLxER.panels{	import flash.display.Sprite;	import flash.utils.*;	//import flash.display.DisplayObjectContainer;	import flash.geom.ColorTransform;	import flash.xml.XMLDocument;	import flash.net.*;	import flash.events.*;	//import flash.display.Loader;    import flash.net.FileReference;	import FLxER.main.Rett;	import FLxER.main.Txt;	import FLxER.comp.CheckBoxBase;	import FLxER.comp.ButtonTxt;	import FLxER.comp.ButtonArrow;	import FLxER.comp.ListMenu;	import FLxER.comp.ListBox;	import FLxER.comp.SliderCh;	import FLxER.panels.MonitorPreviewChannel;	import FLxER.panels.Sequencer;	import FLxER.panels.ColorsCtrl;	import FLxER.panels.Trasform;	import FLxER.panels.Image;	import FLxER.panels.Controller;	public class ChCtrl extends Sprite {		public var myDepth:Number;		public var ch:Number;		private var myPath:String;		public var sliderVal:Number;		public var outStatus:Boolean;		public var lockWipeStatus:Boolean;		public var liveA:Object;		//		private var fondino:Rett;		public var mySlider:SliderCh;		public var out_onoff:CheckBoxBase;		public var myLibSel:ListMenu;		public var myDvInSel:ListMenu;		private var myEject:ButtonTxt;		public var myFileSel:ListBox;		private var myDvIn:CheckBoxBase;		public var myMovie:Txt;		public var treD:CheckBoxBase;		private var myMovieL:ButtonTxt;		private var dl:Txt;		private var myDepthF:Txt;		public var down:ButtonArrow;		public var up:ButtonArrow;		public var myBlend:ListMenu;		public var myLockWipe:CheckBoxBase;		public var myWipe:ListMenu;		private var myTxtEditorP:CheckBoxBase;		private var myTxtEditor:TxtEditor;		public var myMonitorPreviewChannel:MonitorPreviewChannel;		private var fondinoLabW:Rett;		private var fondinoLab:Rett;		private var lab:Txt;		private var led:Rett;		private var myColorsVisualizer:ButtonTxt;		public var myColors:ColorsCtrl;		private var myTrasformVisualizer:ButtonTxt;		public var myTrasform:Trasform;		private var myImageVisualizer:ButtonTxt;		public var myImage:Image;		public var mySequencer:Sequencer;		public var myController:Controller;		public var myTapper:Tapper;		//		private var myPalette:Array;		private var myPlaylistFilesList:XMLDocument;		/**/		private var a:uint;		private var c:uint;		private var l:uint;		public var lastLiveAct:String;		public var oldTipo:String;		////		private var currLib:String;		private var myLoader:URLLoader		private var MySVGwipe:FileReference		public function ChCtrl(a:uint):void {			myDepth = ch = a;			//y = (563-(50*(7-Preferences.pref.nCh)))-(50*ch);			y = int((23+300+(Preferences.pref.nCh*50))-(50*ch)-50+1);			myPath = "";			sliderVal = 100;			outStatus = true;			//myMonitorPreviewChannel.mon.ch_0.myStopStatus = myPreviewStopStatus=true;			lockWipeStatus = false;			liveA = new Object();			// CHANNEL DESIGN //			fondino = new Rett(0, 0, 1000, 49, 0x909090, -1, .5);			this.addChild(fondino);			//			mySlider = new SliderCh(79, 1, 22, 47, sliderFnz, "Q / A or W + Y MOUSE");			this.addChild(mySlider);			out_onoff = new CheckBoxBase(102, 1, 28, 15, "LIVE", live, null, true);			this.addChild(out_onoff);			myLibSel = new ListMenu(131, 1, 100, 15, "select playlist", loadLib, "PAGE UP / PAGE DOWN", Preferences.libraryList.childNodes[0], 3);			this.addChild(myLibSel);			this.myEject = new ButtonTxt(117, 17, 15, 15, "I>", eject, null, "SHIFT + X");			this.myEject.rotation = 90;			this.addChild(myEject);			myFileSel = new ListBox(118, 17, 148, 15, myLoadMovie, null, 1, "ARROW UP", "ARROW DOWN");			this.addChild(myFileSel);			myFileSel.myDisable();			myDvIn = new CheckBoxBase(232, 1, 34, 15, "DV-IN", loadDvIn, null, false);			this.addChild(myDvIn);			myDvInSel = new ListMenu(131, 1, 100, 15, "select dv-in", loadDvInIndex, "", Preferences.myCameras.childNodes[0], 3);			//this.addChild(myDvInSel);			myMovie = new Txt(131, 33, 100, 15, "", Preferences.th, "input", load_url);			this.addChild(myMovie);			this.treD = new CheckBoxBase(102, 33, 28, 15, "3 D", treDengineONOFF, "USE SHIFT + ARROW KEY", false);			this.addChild(treD);			myMovieL = new ButtonTxt(232, 33, 34, 15, "LOAD", load_url, null, null);			this.addChild(myMovieL);						dl = new Txt(270, 1, 38, 15, "DEPTH", Preferences.th, null);			this.addChild(dl);			myDepthF = new Txt(315, 1, 15, 11, (this.ch+1).toString(), Preferences.th, null);			this.addChild(myDepthF);			this.down = new ButtonArrow(309, 3, 90, mySwapDepth, -1, "CTRL + ARROW UP");			this.addChild(down);			this.up = new ButtonArrow(327, 3, -90, mySwapDepth, 1, "CTRL + ARROW DOWN");			this.addChild(up);						myBlend = new ListMenu(409, 1, 84, 15, "BLEND NORMAL", changeBlend, "U / J", Preferences.blendList.childNodes[0], 3);			this.addChild(myBlend);			myLockWipe = new CheckBoxBase(494, 1, 15, 15, "WIPE LOCK: ", lockWipe, "L", false);			this.addChild(myLockWipe);			myWipe = new ListMenu(510, 1, 91, 15, "WIPE NONE (MIX)", changeWipe, "I / K", Preferences.wipes.childNodes[0], 3);			this.addChild(myWipe);			/////// TXT EDITOR ///			myTxtEditorP = new CheckBoxBase(344, 1, 64, 15, "TXT EDITOR", showTxtEditor, null, false);			this.addChild(myTxtEditorP);			myTxtEditor = new TxtEditor(102,1, this, ch);			this.addChild(myTxtEditor);			/////////////////////			// Preview			myMonitorPreviewChannel = new MonitorPreviewChannel(1, 1, 60, 45, this, ch);			this.addChild(myMonitorPreviewChannel);			// Led e Label			fondinoLabW = new Rett(2, 2, 60, 9, 0xFFFFFF, -1, .45);			this.addChild(fondinoLabW);			fondinoLab = new Rett(2, 2, 60, 9, 0x000000, -1, .15);			this.addChild(fondinoLab);			lab = new Txt(10, -1, 47, 15, "CH: "+(this.ch+1), Preferences.th, null);			this.addChild(lab);			led = new Rett(3, 3, 7, 7, 0x000000, -1, 1);			this.addChild(led);			/////// COLORS ///			myColorsVisualizer = new ButtonTxt(606, 1, 61, 15, "COLORS", paletteHideShow, "0", null); // manca param:"myColors"			this.addChild(myColorsVisualizer);			this.myColors = new ColorsCtrl(668, 1, this, ch);			this.addChild(myColors);			////////////////////////			///// TRASFORM ///			myTrasformVisualizer = new ButtonTxt(606, 17, 61, 15, "TRASFORM", paletteHideShow, "1", null); // manca param:"myTrasform"			this.addChild(myTrasformVisualizer);			this.myTrasform = new Trasform(668, 1, this, ch);			this.addChild(myTrasform);			//////////////////////////////////			/////// IMAGE ///			myImageVisualizer = new ButtonTxt(606, 33, 61, 15, "IMAGE", paletteHideShow, "2", null); // manca param:"myEffects"			this.addChild(myImageVisualizer);			this.myImage = new Image(668, 1, this, ch);			this.addChild(myImage);			//			this.myPalette = new Array("myColors", "myTrasform", "myImage");			/////// SEQUENCER ///			this.myController = new Controller(271,17, this, ch);			this.addChild(myController);			this.mySequencer = new Sequencer(344,17,myController, this, ch);			this.addChild(mySequencer);			this.setChildIndex(myController, this.numChildren-1)			this.myTapper = new Tapper(271,33, this, ch);			this.addChild(myTapper);		///////						this.myColorsVisualizer.myDisable();			//this.myTrasformVisualizer.myDisable();			//this.myImageVisualizer.myDisable();			//this.myColors.visible = false;			this.myTrasform.visible = false;			this.myImage.visible = false;			//this.myTxtEditor.center.onPress();			MySVGwipe = new FileReference();			MySVGwipe.addEventListener(Event.SELECT, MySVGwipeSelectHandler);            MySVGwipe.addEventListener(Event.COMPLETE, useMap);		}		public function change_ch():void {			if (Preferences.pref.ch != ch){				Preferences.pref.ch = ch;				for (var a:int=0; a<Preferences.pref.nCh; a++) {					change_col(Preferences.interfaceTrgt.chCnt["ch_"+a].led, 0x00000);				}				change_col(led, 0xFF0000);			}		}		private function treDengineONOFF(p:Boolean):void {			Preferences.starterTrgt.myTreDengine.treDengineONOFF(p, ch)		}		public function change_col(trgt:Sprite, col:uint):void {			var myCol:ColorTransform = trgt.transform.colorTransform;			myCol.color = col;			trgt.transform.colorTransform = myCol;		}		private function loadLib(a:String,b:String):void {			change_ch();			l = 0;			currLib = b;			myPlaylistFilesList = Preferences.createXMLnodeAbsolute(b,["txt","swf","flv","avi","mov","mpg","mp4","f4v","m4v","mpeg","mp3","jpg","png","gif"]);			myFileSel.avvia(myPlaylistFilesList.childNodes[0]);			myFileSel.myEnable();			trace("myPath" +myPath)			myMovie.text = myPath;			myMovie.textColor = Preferences.th.color.toString();		}		public function loadErr(e):void { // Used from ./src/FLxER/core/Monitor.as ./src/FLxER/core/MonitorStereo.as			trace(e)			if (e is NetStatusEvent) {				if (e.info.code == "NetStream.Play.StreamNotFound" || e.info.code == "NetStream.Play.FileStructureInvalid"|| e.info.code == "NetStream.Play.NoSupportedTrackFound") {					myMovie.text = "STREAM NOT FOUND";				} else {					myMovie.text = "FILE NOT FOUND";				}			} else {				myMovie.text = "FILE NOT FOUND";			}			myMovie.textColor = 0xFF0000;			myMovie.setSelection(0, 0);		}		private function lockWipe(p:Boolean):void {			change_ch();			lockWipeStatus = p;		}		private function changeBlend(a:String,p:String):void {			change_ch();			lastLiveAct = ",changeBlend,"+ch+","+p;			//myMonitorPreviewChannel.mbuto((getTimer()-Preferences.lastTime)+",changeBlend,"+ch+","+p);			if (outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+lastLiveAct);			} else {				liveA.changeBlend = lastLiveAct;			}		}		private function paletteHideShow(p:String):void {			change_ch();			for (var a:int=0; a<myPalette.length; a++) {				if (a.toString() == p) {					this[myPalette[a]].visible = true;					this[myPalette[a]+"Visualizer"].myDisable();					//this[myPalette[a]+"Visualizer"].lab.backgroundColor = 0xFFFFFF;				} else {					this[myPalette[a]].visible = false;					this[myPalette[a]+"Visualizer"].myEnable();					//this[myPalette[a]+"Visualizer"].lab.backgroundColor = 0xCCCCCC;				}			}		}		public function mySwapDepth(p:int):void {			myDepth = Preferences.monitorTrgt.mon.getChildIndex(Preferences.monitorTrgt.levels["ch_"+ch]);			change_ch();			if (p != 0) {				if ((myDepth+p<Preferences.pref.nCh) && (myDepth+p>=0)) {					myDepth += p;					//if (outStatus) {					Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",mySwapDepth,"+ch+","+myDepth);					for (var a:int = 0; a<Preferences.pref.nCh; a++) {						Preferences.interfaceTrgt.chCnt["ch_"+a].myDepthF.text = (Preferences.monitorTrgt.mon.getChildIndex(Preferences.monitorTrgt.levels["ch_"+a])+1);					}					//}				}			}		}		public function live(p:Boolean):void {			change_ch();			outStatus = p;			if (p) {				/*				if (tipo == "txt") {					myTxtEditor.myTxtOut = myTxtEditor.myTxt;				} else {					myTxtEditor.myTxtOut = undefined;					if (tipo != "txt") {						clearInterval(myTxtEditor.txtInt);					}					if (myColors.col_onoff.myStatus) {						//var tmp = (getTimer()-Preferences.lastTime)+",applicaLive,"+ch+lastLiveAct+","+myMonitorPreviewChannel.mon.ch_0.x+","+myMonitorPreviewChannel.mon.ch_0.y+","+myMonitorPreviewChannel.mon.ch_0.cnt.vid.x+","+myMonitorPreviewChannel.mon.ch_0.cnt.vid.y+","+myMonitorPreviewChannel.mon.ch_0.cnt.vid.xscale+","+myMonitorPreviewChannel.mon.ch_0.cnt.vid.yscale+","+myMonitorPreviewChannel.mon.ch_0.cnt.vid.rotation+","+sliderVal+","+myWipe.lab.lab.lab.text+",CF,CFT,rb,"+myMonitorPreviewChannel.mon.ch_0.CFT.rb+",CF,CFT,gb,"+myMonitorPreviewChannel.mon.ch_0.CFT.gb+",CF,CFT,bb,"+myMonitorPreviewChannel.mon.ch_0.CFT.bb+","+myMonitorPreviewChannel.mon.ch_0.cnt.fondo.visible+","+myDepth+","+this["myBlend"].lab.lab.lab.text+",CM,CMT,rb,"+myMonitorPreviewChannel.mon.ch_0.CMT.rb+",CM,CMT,gb,"+myMonitorPreviewChannel.mon.ch_0.CMT.gb+",CM,CMT,bb,"+myMonitorPreviewChannel.mon.ch_0.CMT.bb;					} else {						//var tmp = (getTimer()-Preferences.lastTime)+",applicaLive,"+ch+lastLiveAct+","+myMonitorPreviewChannel.mon.ch_0.x+","+myMonitorPreviewChannel.mon.ch_0.y+","+myMonitorPreviewChannel.mon.ch_0.cnt.vid.x+","+myMonitorPreviewChannel.mon.ch_0.cnt.vid.y+","+myMonitorPreviewChannel.mon.ch_0.cnt.vid.xscale+","+myMonitorPreviewChannel.mon.ch_0.cnt.vid.yscale+","+myMonitorPreviewChannel.mon.ch_0.cnt.vid.rotation+","+sliderVal+","+myWipe.lab.lab.lab.text+",CF,CFT,rb,"+myMonitorPreviewChannel.mon.ch_0.CFT.rb+",CF,CFT,gb,"+myMonitorPreviewChannel.mon.ch_0.CFT.gb+",CF,CFT,bb,"+myMonitorPreviewChannel.mon.ch_0.CFT.bb+","+myMonitorPreviewChannel.mon.ch_0.cnt.fondo.visible+","+myDepth+","+this["myBlend"].lab.lab.lab.text;					}					Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",preTxt,"+ch+",txt");					Preferences.monitorTrgt.mbuto(tmp);					myTxtEditor.myTxtOut = myTxtEditor.myTxt;				}				for (a=0; a<Preferences.pref.nCh; a++) {					//Preferences.interfaceTrgt.chCnt["ch_"+a].myDepthF.text = _root.myMonitorPreviewChannel.mon["ch_"+a].getDepth()+1;				}				*/				for (var i:Object in liveA) {					trace("liveA 1"+liveA[i])					trace("liveA 2"+i)					Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+liveA[i]);				}				//lastLiveAct = liveA.loadMedia;				liveA = new Object();				//if (lastLiveAct)  liveA.loadMedia = lastLiveAct;			}		}		private function loadDvInIndex(p:String,v:String):void {			trace(p)			trace(v)			myFileSel.myEnable();			myFileSel.seleziona(0)		}		private function loadDvIn(p:Boolean):void {			change_ch();			if (p) {				removeChild(myLibSel);				addChild(myDvInSel);				//myLibSel.myDisable();				//myLibSel.setVal("select playlist",0);								Preferences.starterTrgt.updateCameras();				myPath = Preferences.dvin.childNodes[0].attributes.path;				//myPlaylistFilesList = new XMLDocument();				//myPlaylistFilesList.parseXML("<lib>"+Preferences.dvin.childNodes[0]+"</lib>")				myFileSel.avvia(Preferences.dvin.childNodes[0]);				if (myDvInSel.startVal == myDvInSel.getVal()[0]) myFileSel.myDisable();			} else {				removeChild(myDvInSel);				addChild(myLibSel);				myPath = "";				if (myPlaylistFilesList) {					myFileSel.myEnable();					myFileSel.avvia(myPlaylistFilesList.childNodes[0]);				} else {					myFileSel.svuota();					myFileSel.myDisable();				}				//myLibSel.myEnable();			}		}		private function showTxtEditor(p:Boolean):void {			change_ch();			myLibSel.visible = !p;			myFileSel.visible = !p;			myDvIn.visible = !p;			myMovie.visible = !p;			myMovieL.visible = !p;			myTxtEditor.visible = p;						if (myDvIn.myStatus) {				if (p) {					removeChild(myDvInSel);				} else {					addChild(myDvInSel);				}			}			if (p) {				myTxtEditor.myTxtField.setSelection(0,10);				myTxtEditor.myReaderMode.seleziona(0);			}		}		private function load_url(a:String):void {			trace("load_url")			trace(a)			trace(myPath)			var tmp:String = Preferences.myReplace(myMovie.text,myPath,"");			trace(tmp)			myLoadMovie(tmp,tmp);		}		private function myLoadMovie(a:String,p:String):void {			Preferences.nLoadErr["ch_"+ch] = 0;			Preferences.currentMedia["ch_"+ch] = p;			myLoadMovieMore(a,p);		}		public function myLoadMovieMore(a:String,p:String):void {			change_ch();			if (p.indexOf("/") == -1) {				p = myPath+p;			}			myMovie.text = p;			myMovie.textColor = Preferences.th.color.toString();			var tipo:String = p.substring(p.length-3, p.length).toLowerCase();			var current_mov:String = (p.substr(0,4)=="http" ? p : Preferences.basepath+p);			trace(tipo);			if (tipo == "txt") {				tipo = "swf";				myTxtEditor.myTxtLoader.load(new URLRequest(current_mov));			} else {				if (tipo == "flv" || tipo == "avi" || tipo == "mov" || tipo == "mpg" || tipo == "mp4" || tipo == "f4v" || tipo == "m4v" || tipo == "mpeg") {					tipo = "flv";					lastLiveAct = ",loadFlv,"+ch+","+current_mov+","+tipo+","+sliderVal;				} else if (tipo == "mp3") {					lastLiveAct = ",loadMp3,"+ch+","+current_mov+","+tipo+","+sliderVal;				} else {					tipo = "swf";//					lastLiveAct = ",loadMedia,"+ch+","+current_mov+","+tipo+","+sliderVal;					lastLiveAct = ",loadMedia,"+ch+","+current_mov+","+tipo+","+sliderVal+(myDvInSel.startVal != myDvInSel.getVal()[0] && this.contains(myDvInSel) ? ","+myDvInSel.getVal() : "");				}				liveA.loadMedia = lastLiveAct;				trace("outStatus1: "+outStatus)				trace("outStatus2: "+myMonitorPreviewChannel.myPreviewActive)				if (outStatus) {					Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+lastLiveAct);				}				if (myMonitorPreviewChannel.myPreviewActive) {					myMonitorPreviewChannel.mbuto((getTimer()-Preferences.lastTime)+lastLiveAct);				}			}			oldTipo = tipo;		}		private function sliderFnz(p:Number):void {			sliderVal = p;			sliderFnz2();		}		private function mouseSlider(p:Number):void {			mySlider.curs.y = (((p))/100)*(mySlider.path.height-mySlider.curs.height);			sliderVal = 100-(p);			mySlider.curs.lab.text = int(sliderVal).toString();			sliderFnz2();		}		private function keySlider(p:Number):void {			if (sliderVal+p>=0 && sliderVal+p<=100) {				sliderVal += p;				mySlider.curs.y = ((-sliderVal/100)+1)*(mySlider.path.height-mySlider.curs.height);				mySlider.curs.lab.text = int(sliderVal).toString();				sliderFnz2();			}		}		private function sliderFnz2():void {			lastLiveAct = ",slideWipe,"+ch+","+sliderVal;			var ccc:String = myWipe.getVal()[0];			switch (ccc) {				case "WIPE NONE (MIX)" :				case "HORIZONTAL" :				case "VERTICAL" :				lastLiveAct+= ","+ccc;				break;			}			if (outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+lastLiveAct);			} else {				liveA.slideWipe = lastLiveAct;			}		}		private function changeWipe(a:String,p:String):void {			lastLiveAct = "";			change_ch();			trace("aaaaa"+a);			if (a != "WIPE NONE (MIX)" && a != "VERTICAL" && a != "HORIZONTAL" && a.indexOf("LOAD SVG MAP")==-1) {				lastLiveAct = ",changeWipe,"+ch+","+Preferences.basepath+p+","+sliderVal;			} else if (a.indexOf("LOAD SVG MAP")!=-1) {	            MySVGwipe.browse([new FileFilter("Vector file", "*.svg")]);							} else {				lastLiveAct = ",redrawWipe,"+ch;			}			if (lastLiveAct) {				if (outStatus) {					Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+lastLiveAct);				} else {					liveA.changeWipe = lastLiveAct;				}				sliderFnz2();			}		}		public function eject(p:String):void {			mySlider.resetta();			treD.resetta();			myFileSel.resetta();			myMovie.resetta();			myController.resetta();			//myDepth.resetta();			myBlend.resetta();			if (mySequencer.seqStatus) {				mySequencer.seq.mouseDownHandler(null);			}			myColors.resetta();			myTrasform.resetta("");			myImage.resetta();			lastLiveAct = ",eject,"+ch;			Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+lastLiveAct);			if (myMonitorPreviewChannel.myPreviewActive) {				myMonitorPreviewChannel.mbuto((getTimer()-Preferences.lastTime)+lastLiveAct);			}		}		private function MySVGwipeSelectHandler(event:Event):void {			var file:FileReference = FileReference(event.target);			trace("MySVGwipeSelectHandler: name=" + file.name);			myWipe.setVal(file.name, file.name);			MySVGwipe.load();		}		public function useMap(event:Event):void {			lastLiveAct = ",useMap,"+ch+","+Preferences.myReplace(MySVGwipe.data.toString(),",",";");			trace(MySVGwipe.data)			//myMonitorPreviewChannel.mbuto((getTimer()-Preferences.lastTime)+",changeBlend,"+ch+","+p);			if (outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+lastLiveAct);			} else {				liveA.useMap = lastLiveAct;			}			sliderFnz2();		}	}}