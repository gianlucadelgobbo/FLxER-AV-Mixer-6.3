package FLxER.panels {	import flash.xml.XMLDocument;	import flash.xml.XMLNode;	import FLxER.panels.Palette;	import FLxER.comp.ButtonTxt;	import FLxER.main.Txt;	import FLxER.comp.ListBox;	import FLxER.comp.ListMenu;	import FLxER.core.FlxerSSConnector;	import FLxER.FlxerAirStarter;	public class OptionsRemote extends Palette {		var trgt:FlxerSSConnector;		var serverUrl,myBroadcastName:Txt;		var connPuls:ButtonTxt;		var myListBox:ListBox;		private var myParent:FlxerAirStarter;		function OptionsRemote(w:int,h:int,t:String,o:FlxerSSConnector,pp:FlxerAirStarter):void {			super(w,h,t,"");			myParent = pp;			trgt = o			var lab0:Txt = new Txt(5, 25, w-10, 10, "1) CONNECT TO A FLxER REMOTE SERVER APPLICATION (FLxERremoteServer.jar)", Preferences.ts, null);			this.palette.addChild(lab0);			trgt.starter(this)			serverUrl = new Txt(30, 55, 275, 11, Preferences.pref.flxerPref.childNodes[0].childNodes[3].childNodes[0].attributes.val, Preferences.th, "input", myEnterMX);			this.palette.addChild(serverUrl);			connPuls = new ButtonTxt(317, 55, 38, 11, "CONNECT", myConnector, null, "");			this.palette.addChild(connPuls);			var brL:Txt = new Txt(30, 80, 0, 0, "Saved FLxER Remote Server application url", Preferences.ts, null);			this.palette.addChild(brL);			for (var a=0;a<Preferences.pref.flxerPref.childNodes[0].childNodes[3].childNodes.length;a++) {				Preferences.pref.flxerPref.childNodes[0].childNodes[3].childNodes[a].attributes.m = Preferences.pref.flxerPref.childNodes[0].childNodes[3].childNodes[a].attributes.val			}			myListBox = new ListBox(30, 95, 340, 11, setServerUrl, Preferences.pref.flxerPref.childNodes[0].childNodes[3], 5, "ARROW UP", "ARROW DOWN");			this.palette.addChild(myListBox);						//_root.myClassedMC(FLxER.comp.listBox, this["palette"], "myListBox", {x:30, y:95, w:340, h:10, fnzTrgt:this, fnz:"setServerUrl", lab:" server", n:6, xml_node:});		}		function myEnterMX(p:String):void {		}		function myConnector(p:String):void {			connPuls.myDisable();			for (var i in myListBox.labsA) {				myListBox.labsA[i].myDisable();			}			trgt.myConnector(serverUrl.text);			mySave(serverUrl.text)		}		public function myRetry():void {			trace("myRetry")			connPuls.myEnable();			for (var i in myListBox.labsA) {				myListBox.labsA[i].myEnable();			}		}		function setServerUrl(m:String,a:String):void {			serverUrl.text = a;		}		public function createList(xml:XMLNode):void {			trace("createList"+xml)			var tit3:Txt = new Txt(15, 170, 0, 0, "2) SET STREAM NAME", Preferences.ts, null);			this.palette.addChild(tit3);			var tit4:Txt = new Txt(15, 190, 0, 0, "2.1) EXISTING STREAM NAME", Preferences.ts, null);			this.palette.addChild(tit4);			var tit5:Txt = new Txt(220, 190, 0, 0, "2.2) NEW STREAM NAME", Preferences.ts, null);			this.palette.addChild(tit5);			if (xml.childNodes[0].childNodes.length>0) {				var myStreamSel:ListMenu = new ListMenu(35, 210, 100, 11, "select stream", broadcast, null, xml.childNodes[0], 6);				this.palette.addChild(myStreamSel);			} else {				var tit6:Txt = new Txt(35, 210, 0, 0, "No stream name available", Preferences.ts, null);				this.palette.addChild(tit6);			}			myBroadcastName = new Txt(230, 210, 100, 11, "", Preferences.th, "input");			this.palette.addChild(myBroadcastName);			var myBroadcastStart:ButtonTxt = new ButtonTxt(340, 210, 24, 11, "SEND", newBroadcast, null, "");			this.palette.addChild(myBroadcastStart);		}		function newBroadcast(p:String):void {			trgt.newBroadcast(myBroadcastName.text);		}		function broadcast(p:String,a:String):void {			trace("broadcast "+a)			trgt.myConnectorBroad(a.split(","));		}		function mySave(server:String):void {			var mycheck:Boolean = true;			trace(Preferences.pref.flxerPref.childNodes[0].childNodes[3])			for (var a:uint=0;a<Preferences.pref.flxerPref.childNodes[0].childNodes[3].childNodes.length;a++) {				if (server == Preferences.pref.flxerPref.childNodes[0].childNodes[3].childNodes[a].attributes.val) {					mycheck = false;				}			}			if (mycheck) {				Preferences.pref.flxerPref.childNodes[0].childNodes[3].appendChild(Preferences.pref.flxerPref.childNodes[0].childNodes[3].childNodes[0].cloneNode(true))				Preferences.pref.flxerPref.childNodes[0].childNodes[3].childNodes[Preferences.pref.flxerPref.childNodes[0].childNodes[3].childNodes.length-1].attributes.val = server			}			trace(Preferences.pref.flxerPref.childNodes[0].childNodes[3])						//var tmp = new XMLDocument();			//tmp.parseXML(Preferences.pref.flxerPref.childNodes[0]);			//Preferences.pref.flxerPref = tmp;			if (Preferences.pref.flxerPref.childNodes[0].childNodes[2].attributes.value == "true") {				Preferences.pref.vKS = true;			} else {				Preferences.pref.vKS = false;			}			/*myParent.myPrefSO.data.flxerPref = Preferences.pref.flxerPref;			myParent.myPrefSO.flush();*/			var tmp = new XMLDocument(Preferences.pref.flxerPref.childNodes[0]);			trace(tmp)			Preferences.pref.flxerPref = tmp;			Preferences.starterTrgt.savePref(tmp); 		}	}}