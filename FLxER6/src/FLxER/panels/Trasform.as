package FLxER.panels {	import flash.display.Sprite;	import flash.utils.*;	//import flash.geom.ColorTransform;//	import FLxER.main.Rett;	import FLxER.main.Txt;	import FLxER.core.Player;	import FLxER.comp.CheckBoxBase;//	import FLxER.comp.ButtonArrow;	import FLxER.comp.ButtonTxt;	import FLxER.comp.SliderTxt;		public class Trasform extends Sprite {		private var movieL:Txt;		private var chL:Txt;		private var chFlipV_m:CheckBoxBase;		private var chFlipH_m:CheckBoxBase;		public var x_m:SliderTxt;		public var y_m:SliderTxt;		public var w_m:SliderTxt;		public var h_m:SliderTxt;		private var rx_m:SliderTxt		private var ry_m:SliderTxt;		private var rz_m:SliderTxt;		private var x_ch:SliderTxt;		private var y_ch:SliderTxt;		private var rx_ch:SliderTxt		private var ry_ch:SliderTxt;		private var rz_ch:SliderTxt;		private var resettaButt:ButtonTxt;		////////		private var ch:uint;		private var myMovie:Player;		private var myParent:ChCtrl;		public function Trasform(xx:int,yy:int,pp:ChCtrl,chch:int):void {			ch = chch;			myParent = pp;			myMovie = Preferences.monitorTrgt.levels["ch_"+ch];			x = xx;			y = yy;			this.movieL = new Txt(0, 0, 0, 0, "MOVIE", Preferences.th, null);			this.addChild(movieL);			//this.movieL.rotation = -90;			this.chFlipV_m = new CheckBoxBase(50, 0,  15, 15, "»", chFlipH, null, false);			this.addChild(chFlipV_m);			this.chFlipH_m = new CheckBoxBase(69, 15, 15, 15, "»", chFlipV, null, false);			chFlipH_m.rotation = -90;			this.addChild(chFlipH_m);			//SliderTxt(xx,yy,ww,hh, l, s, min, max, f, p, a)			this.x_m = new SliderTxt(0, 16, 60, 15, "X", "px", myMovie.vid.x, myMove, "Drag'n'Drop with LOCK WIPE: OFF", Preferences.pref.monObj.monWidth/2);			this.addChild(x_m);			this.y_m = new SliderTxt(0, 32, 60, 15, "Y", "px", myMovie.vid.y, myMove, "Drag'n'Drop with LOCK WIPE: OFF", Preferences.pref.monObj.monHeight/2);			this.addChild(y_m);			this.w_m = new SliderTxt(65, 16, 50, 15, "W", "%", myMovie.vid.scaleX, chScale, "+ OR - / Z + MOUSE / Z + SHIFT + MOUSE");			this.addChild(w_m);			this.h_m = new SliderTxt(65, 32, 50, 15, "H", "%", myMovie.vid.scaleY, chScale, "+ OR - / Z + MOUSE / Z + SHIFT + MOUSE");			this.addChild(h_m);			this.rx_m = new SliderTxt(120, 0, 50, 15, "X", "°", myMovie.vid.rotationX, myRotationM, "");			this.addChild(rx_m);			this.ry_m = new SliderTxt(120, 16, 50, 15, "Y", "°", myMovie.vid.rotationY, myRotationM, "");			this.addChild(ry_m);			this.rz_m = new SliderTxt(120, 32, 50, 15, "Z", "°", myMovie.vid.rotationZ, myRotationM, "CTRL + Z");			this.addChild(rz_m);			this.chL = new Txt(177, 0, 0, 0, "CHANNEL", Preferences.th, null);			this.addChild(chL);			//this.chL.rotation = -90;			this.x_ch = new SliderTxt(180, 16, 60, 15, "X", "px", myMovie.x, myMove, "Drag'n'Drop with LOCK WIPE: ON");			this.addChild(x_ch);			this.y_ch = new SliderTxt(180, 32, 60, 15, "Y", "px", myMovie.y, myMove, "Drag'n'Drop with LOCK WIPE: ON");			this.addChild(y_ch);			this.rx_ch = new SliderTxt(245, 0, 50, 15, "X", "°", myMovie.rotationX, myRotationCh, "");			this.addChild(rx_ch);			this.ry_ch = new SliderTxt(245, 16, 50, 15, "Y", "°", myMovie.rotationY, myRotationCh, "");			this.addChild(ry_ch);			this.rz_ch = new SliderTxt(245, 32, 50, 15, "Z", "°", myMovie.rotationZ, myRotationCh, "");			this.addChild(rz_ch);			this.resettaButt = new ButtonTxt(298, 47, 47, 15, " RESET", resetta, "X", null);			this.resettaButt.rotation = -90;			this.addChild(resettaButt);		}		public function updateOnDrag():void {			this.x_m.setVal(myMovie.vid.x);			this.y_m.setVal(myMovie.vid.y);			this.x_ch.setVal(myMovie.x);			this.y_ch.setVal(myMovie.y);		}		private function myRotationM(p:Number):void {			myParent.change_ch();			myParent.lastLiveAct = ",mRotate,"+ch+","+rx_m.getVal()+","+ry_m.getVal()+","+rz_m.getVal();			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.mRotate = myParent.lastLiveAct;			}		}		public function mouseRotationChX(p:Number):void {			rx_m.setVal(p)			myRotationM(p)		}		public function mouseRotationChY(p:Number):void {			ry_m.setVal(p)			myRotationM(p)		}		public function mouseRotationChZ(p:Number):void {			rz_m.setVal(p)			myRotationM(p)		}		private function myRotationCh(p:Number):void {			myParent.change_ch();			myParent.lastLiveAct = ",chRotate,"+ch+","+rx_ch.getVal()+","+ry_ch.getVal()+","+rz_ch.getVal();			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.chRotate = myParent.lastLiveAct;			}		}		private function myMove(p:Number):void {			myParent.change_ch();			trace(x_m.getVal())			myParent.lastLiveAct = ",chMove,"+ch+","+x_ch.getVal()+","+y_ch.getVal()+","+x_m.getVal()+","+y_m.getVal();			Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);		}		private function chScale(p:Number):void {			myParent.change_ch();			myParent.lastLiveAct = ",chScale,"+ch+","+w_m.getVal()+","+h_m.getVal();			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.scala = myParent.lastLiveAct;			}		}		public function mouseScale(p:Number,p2:Number):void {			this.w_m.setVal(p*10);					this.h_m.setVal(p2*10);			myParent.lastLiveAct = ",chScale,"+ch+","+p+","+p2;			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.scala = myParent.lastLiveAct;			}		}		private function chFlipH(p:Boolean):void {			myParent.change_ch();			myParent.lastLiveAct = ",chFlipH,"+ch+","+p;			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.chFlipH = myParent.lastLiveAct;			}			w_m.setVal(myMovie.vid.scaleX*100);		}		private function chFlipV(p:Boolean):void {			myParent.change_ch();			myParent.lastLiveAct = ",chFlipV,"+ch+","+p;			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.chFlipV = myParent.lastLiveAct;			}			h_m.setVal(myMovie.vid.scaleY*100);		}		public function resetta(p:String):void {			myParent.change_ch();			if (this.chFlipV_m.myStatus) {				this.chFlipV_m.myStatus_swap()				chFlipV(false);			}			if (this.chFlipH_m.myStatus) {				this.chFlipH_m.myStatus_swap()				chFlipH(false);			}			x_m.resetta();			y_m.resetta();			w_m.resetta();			h_m.resetta();			rx_m.resetta()			ry_m.resetta();			rz_m.resetta();			x_ch.resetta();			y_ch.resetta();			rx_ch.resetta()			ry_ch.resetta();			rz_ch.resetta();		}	}}