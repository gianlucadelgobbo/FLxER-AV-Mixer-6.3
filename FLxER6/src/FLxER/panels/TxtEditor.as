package FLxER.panels{	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.utils.getTimer;		import FLxER.comp.ButtonTxt;	import FLxER.comp.ListMenu;	import FLxER.main.Txt;	public class TxtEditor extends Sprite {		////////		public var myTxtFont:ListMenu,myReaderMode:ListMenu;		public var left:ButtonTxt,center:ButtonTxt,right:ButtonTxt;		public var myTxtField:Txt;		private var myAlignPuls:Array;		public var myTxtLoader:URLLoader;		private var txtInt:Number;		private var myTxt:String;		//private var currentReaderMode;		private var ch:uint;		//private var myMovie:Player;		private var myParent:ChCtrl;		public function TxtEditor(xx:int,yy:int,pp:ChCtrl,chch:int):void {			ch = chch;			myParent = pp;			//myMovie = Preferences.monitorTrgt.levels["ch_"+ch];			this.x = xx;			this.y = yy;			this.visible = false;			myTxtFont = new ListMenu(0, 0, 64, 15, "ReaderFont", FONTtxt, undefined, Preferences.myFonts.childNodes[0].childNodes[0], 3);			this.addChild(myTxtFont);			left = new ButtonTxt(65, 0, 12, 15, "E", ALIGNtxt, "left", null);			this.addChild(left);			center = new ButtonTxt(78, 0, 10, 15, "=", ALIGNtxt, "center", null);			center.myDisable();			this.addChild(center);			right = new ButtonTxt(89, 0, 12, 15, "3", ALIGNtxt, "right", null);			this.addChild(right);			myReaderMode = new ListMenu(102, 0, 62, 15, Preferences.readers.childNodes[0].childNodes[0].attributes.m, readerMode, "", Preferences.readers.childNodes[0], 3);			this.addChild(myReaderMode);			this.myAlignPuls = new Array("right", "center", "left");			myTxtField = new Txt(0, 16, 164, 31, "", Preferences.th, "input",swapTxt);			this.addChild(myTxtField);			myTxtField.multiline = true;			myTxtField.wordWrap = true;			myTxtLoader = new URLLoader();			myTxtLoader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);            myTxtLoader.addEventListener(Event.COMPLETE, loaderCompleteHandler);/*			this.my_mcl = new MovieClipLoader();			this.createEmptyMovieClip("myReaderModeTrgt", this.getNextHighestDepth());			this.my_mcl.loadClip(Preferences.readers.childNodes[0].attributes.path+Preferences.readers.childNodes[0].childNodes[0].attributes.m, this.myReaderModeTrgt);			this.my_mclL = new Object();			this.my_mclL.owner = this;			this.my_mclL.onLoadInit = function(t) {				if (t) {					owner.currentReaderMode.starter(owner);				}			};			this.my_mcl.addListener(this.my_mclL);*/		}		private function loaderCompleteHandler(event:Event):void {			newTxt(myTxtLoader.data);		}		private function errorHandler(event:Event):void {			myParent.myMovie.text = "FILE NOT FOUND";			myParent.myMovie.textColor = Preferences.pref.myCol.bkgColOver;		}		private function newTxt(txt:String):void {			//clearInterval(this.txtInt);			this.myTxt = Preferences.myReplace(txt, ",","");			myTxtField.text = this.myTxt;			var tmp:Array = myReaderMode.getVal();			if (tmp[0]==tmp[1]) {				myReaderMode.seleziona(0);				tmp = myReaderMode.getVal();			}			readerMode(tmp[0],tmp[1])		}		private function readerMode(a:String,p:String):void {			this.myParent.change_ch();			trace(a)			trace(p)			myParent.lastLiveAct = ",loadMedia,"+this.myParent.ch+","+Preferences.basepath+p+",swf,"+this.myParent.sliderVal+","+this.myTxt+","+Preferences.msVal["ch_"+myParent.ch]+",txt";			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.loadMedia = myParent.lastLiveAct;			}			if (myParent.myMonitorPreviewChannel.myPreviewActive) {				myParent.myMonitorPreviewChannel.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			}		}		private function swapTxt(p:String):void {			this.myParent.change_ch();			newTxt(myTxtField.text);		}		private function FONTtxt(a:String,p:String):void {			this.myParent.change_ch();			myParent.lastLiveAct = ",FONTtxt,"+this.myParent.ch+","+p;			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.FONTtxt = myParent.lastLiveAct;			}			if (myParent.myMonitorPreviewChannel.myPreviewActive) {				myParent.myMonitorPreviewChannel.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			}		}		private function ALIGNtxt(p:String):void {			trace("ALIGNtxt "+p)			this.myParent.change_ch();			for (var a:uint=0; a<this.myAlignPuls.length; a++) {				trace("SSSSSSSSSSSSSSS"+myAlignPuls[a])				if (this.myAlignPuls[a] == p) {					this[this.myAlignPuls[a]].myDisable();					myParent.lastLiveAct = ",ALIGNtxt,"+this.myParent.ch+","+p;					if (myParent.outStatus) {						Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);					} else {						myParent.liveA.ALIGNtxt = myParent.lastLiveAct;					}					if (myParent.myMonitorPreviewChannel.myPreviewActive) {						myParent.myMonitorPreviewChannel.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);					}				} else {					this[this.myAlignPuls[a]].myEnable();				}			}		}	}}