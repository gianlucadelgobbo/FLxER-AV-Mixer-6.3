package FLxER.panels {	import flash.desktop.NativeApplication;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.getTimer;		import FLxER.comp.ButtonTxt;	import FLxER.comp.CheckBoxBase;	import FLxER.comp.ListMenu;	import FLxER.comp.SliderTxt;	import FLxER.main.Rett;	import FLxER.main.Txt;	import FLxER.panels.Recorder;

    //import flxertuio;	public class GlobalCtrl extends Sprite {		private var fondo:Rett;		private var logo:Txt;		private var puls0:CheckBoxBase;		private var puls1:ButtonTxt,puls3:ButtonTxt,puls6:ButtonTxt,puls8:ButtonTxt;		private var puls7:ListMenu;		public var myRecorder:Recorder;		public var puls2:CheckBoxBase,puls22:CheckBoxBase,puls4:CheckBoxBase,puls5:CheckBoxBase;		private var myFps:SliderTxt;		private var debug:Txt;		private var puls11:CheckBoxBase;		public function GlobalCtrl():void {			Preferences.myGlobalCtrl = this;			fondo = new Rett(0, 0, 1000, 23, 0x808080, -1, .5);			fondo.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler)			this.addChild(fondo);			logo = new Txt(-1, -3, 0, 0, "FLxER.net", Preferences.ts, "");			logo.scaleX = logo.scaleY=2			this.addChild(logo);						puls8 = new ButtonTxt(1000-16, 7, 13, 15, "X", chiudi, null, "ALT + F4 // CTRL + Q");			this.addChild(puls8);			var nextX:uint = puls8.x						//puls7 = new ButtonTxt(nextX-72-4, 7, 72, 15, "ADD MODULE", addModule, null, null);			puls7 = new ListMenu(nextX-72-4, 7, 72, 15, "ADD MODULE", addModule, null, Preferences.modules.childNodes[0], 3);			this.addChild(puls7);			nextX = puls7.x						puls6 = new ButtonTxt(nextX-12-4, 7, 12, 15, "?", vaiHelp, null, "HELP");			this.addChild(puls6);			nextX = puls6.x						if (!Preferences.pref.bitmap) {				puls5 = new CheckBoxBase(nextX-69-4, 7, 69, 15, "STEREO OUT", myStereoFullscreen, "F", false);				this.addChild(puls5);				nextX = puls5.x;			}			puls4 = new CheckBoxBase(nextX-72-4, 7, 72, 15, "MONITOR OUT", myFullscreen, "F", false);			this.addChild(puls4);			nextX = puls4.x;						puls3 = new ButtonTxt(nextX-82-4, 7, 82, 15, "PREFERENCES", openPrefPanel, null, null);			this.addChild(puls3);			nextX = puls3.x						puls2 = new CheckBoxBase(nextX-24-4, 7, 24, 15, "MIDI", openMIDIPanel, null, false);			this.addChild(puls2);			nextX = puls2.x			puls22 = new CheckBoxBase(nextX-28-4, 7, 28, 15, "OSC", openOSCPanel, null, false);			this.addChild(puls22);			nextX = puls22.x			puls1 = new ButtonTxt(nextX-118-4, 7, 118, 15, "REFRESH FILES LISTS", refreshLists, null, null);			this.addChild(puls1);			nextX = puls1.x			/*			puls11 = new CheckBoxBase(nextX-26-4, 7, 26, 15, "HI-Q", myHQ, "H", true);			this.addChild(puls11);			nextX = puls11.x			*/			if (!Preferences.pref.bitmap) {				puls0 = new CheckBoxBase(nextX-54-4, 7, 54, 15, "PREVIEW", myPreview, null, true);				this.addChild(puls0);				nextX = puls0.x			}						this.myFps = new SliderTxt(nextX-66-4, 7, 66, 15, "FPS", "fps", 25, changeFps, "alt", 0, 1, 200, true);			this.addChild(myFps);						myRecorder = new Recorder(160);				this.addChild(myRecorder);		}		public function openPrefPanel(p:String):void {			Preferences.starterTrgt.openPrefPanel();		}		private function openOSCPanel(p:Boolean):void {			Preferences.starterTrgt.openOSCPanel(puls22);		}		private function refreshLists(p:String):void {			Preferences.starterTrgt.refreshLists();		}		private function openMIDIPanel(p:Boolean):void {			Preferences.starterTrgt.midiOnOff(p);			Preferences.starterTrgt.openMIDIPanel(puls2);		}		private function addModule(p:String, v:String):void {			Preferences.starterTrgt.addModule(p);		}		private function mouseDownHandler(event:MouseEvent):void {			Preferences.starterTrgt.mainWindow.startMove();		}		private function changeFps(p:Number):void {			Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",changeFps,0,"+p);		}		private function myHQ(t:Boolean):void {			if (Preferences.monitorOut) Preferences.monitorOut.myHQ(t);			Preferences.monitorTrgt.myHQ(t);		}		private function myPreview(p:Boolean):void {			Preferences.myPreviewActive = p			trace("bella"+p)			for (var a:int=0; a<Preferences.pref.nCh; a++) {				if (Preferences.monitorOut) Preferences.monitorOut.levels["ch_"+a].audioEnabled = !p;				if (!p) {					Preferences.monitorTrgt.levels["ch_"+a].eject(null);				} else {					Preferences.interfaceTrgt.chCnt["ch_"+a].live(true);				}			}		}		private function myFullscreen(p:Boolean):void {			Preferences.starterTrgt.myFullscreen(p,false);			//puls4.myDisable();			if (!Preferences.pref.bitmap) puls5.myDisable();		}		private function myStereoFullscreen(p:Boolean):void {			Preferences.starterTrgt.myFullscreen(p,true);			puls4.myDisable();			if (!Preferences.pref.bitmap) puls5.myDisable();		}		private function chiudi(p:String):void {			//fscommand("quit", "");			NativeApplication.nativeApplication.exit();		}		private function vaiHelp(p:String):void {			navigateToURL(new URLRequest("http://wiki.flxer.net"),"_blank");		}	}}