package FLxER.panels {	import flash.display.Sprite;	import flash.utils.clearInterval;	import flash.utils.getTimer;	import flash.utils.setInterval;		import FLxER.comp.ButtonTxt;	import FLxER.comp.CheckBoxBase;	import FLxER.comp.CheckBoxSeq;	import FLxER.comp.ListMenu;	import FLxER.main.Rett;	public class Sequencer extends Sprite {		public var seqStatus:Boolean;		private var c:uint;		private var myStatusList:Array;		private var lastStop:Boolean;		private var lastHide:Boolean;		private var seqPattern:Array;				public var seq:CheckBoxBase;		private var myPatternSel:ListMenu;		private var myReset:ButtonTxt;		private var s0:CheckBoxSeq,s1:CheckBoxSeq,s2:CheckBoxSeq,s3:CheckBoxSeq,s4:CheckBoxSeq,s5:CheckBoxSeq,s6:CheckBoxSeq,s7:CheckBoxSeq,s8:CheckBoxSeq,s9:CheckBoxSeq,s10:CheckBoxSeq,s11:CheckBoxSeq,s12:CheckBoxSeq,s13:CheckBoxSeq,s14:CheckBoxSeq,s15:CheckBoxSeq;		private var fondo:Rett;		private var controller:Controller;		private var pulsa:Sprite;		public var ch:uint;		//private var myMovie:Player;		private var myParent:ChCtrl;		public function Sequencer(xx:uint,yy:uint,c:Controller,pp:ChCtrl,chch:int):void {			ch = chch;			myParent = pp;			//myMovie = Preferences.monitorTrgt.levels["ch_"+ch];			Preferences.pos["ch_"+ch] = 0;			lastStop = false;			lastHide = false;			controller = c;			this.x = xx;			this.y = yy;			this.myStatusList = new Array("NULL", "PLAY", "STOP", "REWIND", "HIDE", "SHOW");			seqStatus = false;			this.myPatternSel = new ListMenu(73, 0, 140, 15, "select pattern", loadPattern, undefined, Preferences.sequencerPattern.childNodes[0], 2);			this.addChild(myPatternSel);			this.myReset = new ButtonTxt(217, 0, 39, 15, "RESET", resetta, "NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL", null);			this.addChild(myReset);			this.pulsa = new Sprite();			this.addChild(pulsa);			for (var a:int=15; a>=0; a--) {				this["s"+a.toString()] = new CheckBoxSeq((a*16)+1, 16, 15, 15, swapSeq, myStatusList, a.toString());				this.pulsa.addChild(this["s"+a]);			}			this.fondo = new Rett(0, -1, 257, 32, 0x999999, -1, .5);			this.addChild(fondo);			this.seq = new CheckBoxBase(1, 0, 68, 15, "SEQUENCER", avvia, null, false);			this.addChild(seq);		}		private function avvia(p:Boolean):void {			myParent.change_ch();			trace("avvia"+p)			seqStatus = p;			if (seqStatus) {				//pos = -1;				if (!seqPattern) {					seqPattern = new Array("NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL");				}				if (!Preferences.pref.masterTap) myTimer();				fondo.visible = false;							} else {				seqPattern = undefined;				removeSeq();				this["s"+Preferences.pos["ch_"+ch]].lab.borderColor = 0x999999;				this["s"+Preferences.pos["ch_"+ch]].lab.border = false;			}			Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",seqManager,"+myParent.ch+","+p);		}		public function myTimerOff():void {			clearInterval(c);			this["s"+Preferences.pos["ch_"+ch]].lab.borderColor = 0x999999;			this["s"+Preferences.pos["ch_"+ch]].lab.border = false;			Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",removeSeq,"+myParent.ch);		}		public function myTimer():void {			clearInterval(c);			if (seqStatus) {				seqAct();				c = setInterval(seqAct, Preferences.msVal["ch_"+myParent.ch]);				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",seqUpdater,"+myParent.ch+","+Preferences.msVal["ch_"+myParent.ch]);			}		}		private function removeSeq():void {			clearInterval(c);			controller.playpause(controller.playVal);			controller.hider(controller.hideVal);			this.setChildIndex(fondo,this.numChildren - 1)			this.setChildIndex(seq,this.numChildren - 1)			fondo.visible = true			Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",removeSeq,"+myParent.ch);		}		private function swapSeq(p:uint,v:uint):void {			myParent.change_ch();			trace(seqPattern)			seqPattern[p] = myStatusList[v];			trace(seqPattern)			Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",setSeqPattern,"+myParent.ch+","+seqPattern.toString());		}		public function resetta(p:String):void {			loadPattern("0","NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL");			controller.playpause(controller.playVal);			controller.hider(controller.hideVal);			myPatternSel.resetta()		}		private function loadPattern(p1:String,p:String):void {			myParent.change_ch();			var tmp:Array = p.split(",");			for (var a:int = 15; a>=0; a--) {				for (var b:int = 0; b<this.myStatusList.length; b++) {					if (tmp[a] == this.myStatusList[b]) {						trace("a: "+a+" b: "+b)						this["s"+a].myStatusSeq = b;						seqPattern[a] = this["s"+a].txt = this["s"+a].myList[b]						//this["s"+a].mouseOutHandlerSeq();						this["s"+a].mouseOutHandler(null);					}				}			}			Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",setSeqPattern,"+myParent.ch+","+seqPattern.toString());		}		public function setCh(ch:uint):void {			ch = ch;		}		public function spegni(pos:uint):void {			if (pos>=0) {				this["s"+pos].lab.borderColor = 0x999999;				this["s"+pos].lab.border = false;			}		}		private function avanti():void {			if (Preferences.pos["ch_"+ch]>14) {				Preferences.pos["ch_"+ch] = 0;			} else {				Preferences.pos["ch_"+ch]++;			}		}		public function accendi(pos):void {			this["s"+pos].lab.borderColor = 0xFF0000;			this["s"+pos].lab.border = true;		}		private function seqAct():void {			if (myParent.myTapper.masterTap.myStatus) {				for (var a:uint=0;a<Preferences.pref.nCh;a++) {					if (Preferences.interfaceTrgt.chCnt["ch_"+a].mySequencer.seqStatus) Preferences.interfaceTrgt.chCnt["ch_"+a].mySequencer.spegni(Preferences.pos["ch_"+ch]);				}				avanti();				for (a=0;a<Preferences.pref.nCh;a++) {					if (Preferences.interfaceTrgt.chCnt["ch_"+a].mySequencer.seqStatus) Preferences.interfaceTrgt.chCnt["ch_"+a].mySequencer.accendi(Preferences.pos["ch_"+ch]);				}			} else {				spegni(Preferences.pos["ch_"+ch]);				avanti();				accendi(Preferences.pos["ch_"+ch]);			}		}		public function keyControl(n:uint):void {			switch (n) {			case 1 :				if (lastStop) {					this["s"+Preferences.pos["ch_"+ch]].setStatus(1);				} else {					this["s"+Preferences.pos["ch_"+ch]].setStatus(2);				}				lastStop = !lastStop;				break;			case 3 :				this["s"+Preferences.pos["ch_"+ch]].setStatus(3);				break;			case 4 :				if (lastHide) {					this["s"+Preferences.pos["ch_"+ch]].setStatus(5);				} else {					this["s"+Preferences.pos["ch_"+ch]].setStatus(4);				}				lastHide = !lastHide;				break;			}			seqPattern[Preferences.pos["ch_"+ch]] = this["s"+Preferences.pos["ch_"+ch]].txt = this["s"+Preferences.pos["ch_"+ch]].myList[this["s"+Preferences.pos["ch_"+ch]].myStatusSeq]			Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+",setSeqPattern,"+myParent.ch+","+seqPattern.toString());		}	}}