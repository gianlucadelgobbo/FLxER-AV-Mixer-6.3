package FLxER.panels {	import flash.display.Sprite;	import flash.utils.getTimer;	import flash.events.*;	import flash.display.Loader;	import FLxER.comp.CheckBoxBase;	import FLxER.main.Rett;	import FLxER.comp.ButtonRett;	import FLxER.core.Player;	public class MonitorPreviewChannel extends Sprite {		private var w:uint;		private var h:uint;		private var alt:String;		private var fondo:Rett;		private var fondino:Rett;		private var myMask:Rett;		private var mon_onoff:CheckBoxBase,mon_playstop:CheckBoxBase,mon_bkg:CheckBoxBase;		private var dragButt:ButtonRett;		public var levels:Object;		//		private var myAction:Array;		public var out:Boolean;		private var ch:uint;		public var myPreviewActive:Boolean;		//private var myMovie:Player;		private var myParent:ChCtrl;		public function MonitorPreviewChannel(xx:int, yy:int, ww:uint, hh:uint,pp:ChCtrl,chch:int):void {			ch = chch;			myParent = pp;			//myMovie = Preferences.monitorTrgt.levels["ch_"+ch];			x = xx;			y = yy;			w = ww;			h = hh;			alt = (ch+1).toString();			out = false;			myPreviewActive = false			fondino = new Rett(0,0,w+2,h+2,0x333333,-1,1);;			this.addChild(fondino);			fondo = new Rett(1,1,w,h,0x000000,-1,1);;			this.addChild(fondo);			myMask = new Rett(1,1,w,h,0x000000,-1,1);;			this.addChild(myMask);			mon_onoff = new CheckBoxBase(w+2, 0, 15, 15, "PREVIEW: ", previewOnOff, null, false);			this.addChild(mon_onoff);			mon_playstop = new CheckBoxBase(w+2, 16, 15, 15, "PLAY: ", mon_play, null, true);			this.addChild(mon_playstop);			mon_bkg = new CheckBoxBase(w+2, 32, 15, 15, "BLACK BKG: ", bkg, null, false);			this.addChild(mon_bkg);			mon_playstop.myDisable()			mon_bkg.myDisable()			//this.addEventListener(MouseEvent.MOUSE_DOWN,myDrag);			this.addEventListener(MouseEvent.MOUSE_DOWN,change_ch);			this.buttonMode = false;			this.mouseChildren = true;		}		public function change_ch(e:Event):void {			myParent.change_ch();		}		public function previewOnOff(val:Boolean):void {			myParent.change_ch();			if (!levels) {				levels = new Object();				levels["ch_"+ch] = new Player(ch, w, h, this);				//levels["ch_"+ch].width = w;				//levels["ch_"+ch].height = h;				levels["ch_"+ch].x = 1;				levels["ch_"+ch].y = 1;				levels["ch_"+ch].myStopStatus = !mon_playstop.myStatus;			}			if (val) {				this.addChild(levels["ch_"+ch]);				levels["ch_"+ch].mask = myMask;				myPreviewActive = true;				mon_playstop.myEnable()				mon_bkg.myEnable()				if (myParent.liveA.loadMedia)  mbuto((getTimer()-Preferences.lastTime)+myParent.liveA.loadMedia);			} else {				this.removeChild(levels["ch_"+ch]);				myPreviewActive = false;				mon_playstop.myDisable()				mon_bkg.myDisable()			}		}		public function mon_play(val:Boolean):void {			myParent.change_ch();			if (val) {				mbuto("0,PLAY,"+ch)			} else {				mbuto("0,STOP,"+ch)			}		}		public function bkg(p:Boolean):void {			myParent.change_ch();			if (p) {				myParent.change_col(this.fondo, 0xFFFFFF);			} else {				myParent.change_col(this.fondo, 0x000000);			}		}		public function mbuto(azione:String):void {			trace("MMmbutoPreview"+azione);			myAction = azione.split(",");			trace("MMmbutoPreview"+myAction[2]);			trace("MMmbutoPreview"+myAction[1]);			levels["ch_"+myAction[2]][myAction[1]](myAction);		}		public function initHandlerSWF(e:Loader,ch:uint):void {		}		public function initHandlerFLV(event:Event,ch:uint):void {			trace("OOOOOOOOOOOOOOOOOOOOOOOOOO")		}		public function initHandlerMP3(ch:uint):void {		}		public function initHandlerJPG(e:Loader,ch:uint):void {		}		public function errorHandlerCNT(event:Event,ch:uint):void {		}		public function errorHandlerSWF(event:Event,ch:uint):void {			errorHandlerCNT(event,ch);		}		public function errorHandlerFLV(event:Event,ch:uint):void {			errorHandlerCNT(event,ch);		}		public function errorHandlerMP3(event:Event,ch:uint):void {			errorHandlerCNT(event,ch);		}		public function errorHandlerJPG(event:Event,ch:uint):void {		}		public function errorHandlerWipes(event:Event, ch:uint):void {		}	}}