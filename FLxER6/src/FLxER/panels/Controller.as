package FLxER.panels {	import flash.display.Sprite;	import flash.utils.*;	import FLxER.comp.CheckBoxBase;	import FLxER.comp.ButtonTxt;	public class Controller extends Sprite {		public var myRew:ButtonTxt;		public var myPlay:CheckBoxBase;		public var mySolo:CheckBoxBase;		public var myHide:CheckBoxBase;		public var playVal:Boolean;		public var hideVal:Boolean;		private var ch:uint;		//private var myMovie:Player;		private var myParent:ChCtrl;		public function Controller(xx:int,yy:int,pp:ChCtrl,chch:int):void {			ch = chch;			myParent = pp;			//myMovie = Preferences.monitorTrgt.levels["ch_"+ch];			this.x = xx;			this.y = yy;			this.myRew = new ButtonTxt(0, 0, 19, 15, " <<", rewind, "", "ARROW LEFT");			this.addChild(myRew);			this.myPlay = new CheckBoxBase(20, 0, 15, 15, " >", playpause, "SPACE", true);			this.addChild(myPlay);			this.mySolo = new CheckBoxBase(37, 0, 15, 15, "SOLO: ", solo, "SHIFT + CTRL + SPACE", false);			//this.mySolo.mouseUpAcivation(solo);			this.addChild(mySolo);			this.myHide = new CheckBoxBase(53, 0, 15, 15, "HIDE: ", hider, "CTRL + SPACE", false);			this.addChild(myHide);			this.playVal = true;			this.hideVal = false;		}		public function resetta():void {			myPlay.resetta();			myHide.resetta();			mySolo.resetta();		}		private function solo(p:Boolean):void {			var a:uint;			if (p) {				Preferences.pref.mySeqA = new Object();				Preferences.pref.mySoloA = new Object();				for (a = 0; a<Preferences.pref.nCh; a++) {					if(Preferences.interfaceTrgt.chCnt["ch_"+a].myController.mySolo.myStatus && this.ch != a){						Preferences.interfaceTrgt.chCnt["ch_"+a].myController.mySolo.mouseDownHandler(null);					}				}				for (a = 0; a<Preferences.pref.nCh; a++) {					//Preferences.interfaceTrgt.chCnt["ch_"+a].myController.myHide.myDisable();					Preferences.pref.mySeqA["ch_"+a] = Preferences.interfaceTrgt.chCnt["ch_"+a].mySequencer.seqStatus;					Preferences.pref.mySoloA["ch_"+a] = Preferences.interfaceTrgt.chCnt["ch_"+a].myController.hideVal;					if(Preferences.interfaceTrgt.chCnt["ch_"+a].mySequencer.seqStatus && myParent.ch != a){						Preferences.interfaceTrgt.chCnt["ch_"+a].mySequencer.seq.mouseDownHandler(null);					}					if(!Preferences.interfaceTrgt.chCnt["ch_"+a].myController.hideVal && myParent.ch != a){						Preferences.interfaceTrgt.chCnt["ch_"+a].myController.myHide.mouseDownHandler(null);					}				}			} else {				for (a = 0; a<Preferences.pref.nCh; a++) {					//Preferences.interfaceTrgt.chCnt["ch_"+a].myController.myHide.myEnable();					if(Preferences.pref.mySeqA["ch_"+a] && myParent.ch != a){						Preferences.interfaceTrgt.chCnt["ch_"+a].mySequencer.seq.mouseDownHandler(null);					}					if(!Preferences.pref.mySoloA["ch_"+a] == Preferences.interfaceTrgt.chCnt["ch_"+a].myController.hideVal){						Preferences.interfaceTrgt.chCnt["ch_"+a].myController.myHide.mouseDownHandler(null);					}				}			}			myParent.change_ch();		}		public function rewind(p:String):void {			myParent.change_ch();			myParent.lastLiveAct = ",REWIND,"+myParent.ch;			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.rewindplaypause = myParent.lastLiveAct;			}		}		public function playpause(p:Boolean):void {			myParent.change_ch();			var tmp:String;			playVal = p;			if (p == true) {				tmp = "PLAY";			} else if (p == false) {				tmp = "STOP";			}			myParent.lastLiveAct = ","+tmp+","+myParent.ch;			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.rewindplaypause = myParent.lastLiveAct;			}		}		public function hider(p:Boolean):void {			myParent.change_ch();			var tmp:String;			hideVal = p;			if (hideVal) {				tmp = "HIDE";			} else {				tmp = "SHOW";			}			myParent.lastLiveAct = ","+tmp+","+myParent.ch;			if (myParent.outStatus) {				Preferences.monitorTrgt.mbuto((getTimer()-Preferences.lastTime)+myParent.lastLiveAct);			} else {				myParent.liveA.hider = myParent.lastLiveAct;			}		}	}}